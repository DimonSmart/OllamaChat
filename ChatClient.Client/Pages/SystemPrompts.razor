@page "/system-prompts"
@using ChatClient.Shared.Models
@using ChatClient.Shared.Services
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>System Prompts Management</PageTitle>

<div class="container">
    <h1>System Prompts</h1>
    
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="() => AddNewPrompt()">
            <i class="bi bi-plus-circle"></i> Add New Prompt
        </button>
    </div>
    
    @if (loading)
    {
        <div class="d-flex align-items-center mb-3">
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            <span>Loading system prompts...</span>
        </div>
    }
    else if (prompts.Count == 0)
    {
        <div class="alert alert-info">
            No system prompts found. Click "Add New Prompt" to create one.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prompt in prompts)
                    {
                        <tr>
                            <td>@prompt.Name</td>
                            <td>@prompt.UpdatedAt.ToLocalTime().ToString("g")</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPrompt(prompt)">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(prompt)">Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    
    @if (showPromptDialog)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(editingPrompt.Id == null ? "Add New Prompt" : "Edit Prompt")</h5>
                        <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" @bind="editingPrompt.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Content</label>
                            <textarea class="form-control" rows="8" @bind="editingPrompt.Content"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SavePrompt">Save</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop show"></div>
        </div>
    }
    
    @if (showDeleteDialog)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the prompt "@promptToDelete?.Name"?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeletePrompt">Delete</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop show"></div>
        </div>
    }
</div>

@code {
    private List<SystemPrompt> prompts = new();
    private bool loading = true;
    private bool showPromptDialog = false;
    private bool showDeleteDialog = false;
    private SystemPrompt editingPrompt = new();
    private SystemPrompt? promptToDelete;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPrompts();
    }
    
    private async Task LoadPrompts()
    {
        try
        {
            loading = true;
            StateHasChanged();
            
            var response = await Http.GetAsync("api/systemprompts");
            
            if (response.IsSuccessStatusCode)
            {
                prompts = await response.Content.ReadFromJsonAsync<List<SystemPrompt>>() ?? new();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Failed to load prompts", response.StatusCode);
                prompts = new List<SystemPrompt>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Exception loading prompts", ex.Message);
            prompts = new List<SystemPrompt>();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
    
    private void AddNewPrompt()
    {
        editingPrompt = new SystemPrompt();
        showPromptDialog = true;
    }
    
    private void EditPrompt(SystemPrompt prompt)
    {
        editingPrompt = new SystemPrompt
        {
            Id = prompt.Id,
            Name = prompt.Name,
            Content = prompt.Content,
            CreatedAt = prompt.CreatedAt,
            UpdatedAt = prompt.UpdatedAt
        };
        showPromptDialog = true;
    }
    
    private void ConfirmDelete(SystemPrompt prompt)
    {
        promptToDelete = prompt;
        showDeleteDialog = true;
    }
    
    private async Task SavePrompt()
    {
        try
        {
            if (string.IsNullOrEmpty(editingPrompt.Id))
            {
                await Http.PostAsJsonAsync("api/systemprompts", editingPrompt);
            }
            else
            {
                await Http.PutAsJsonAsync($"api/systemprompts/{editingPrompt.Id}", editingPrompt);
            }
            
            await LoadPrompts();
            CloseDialog();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving prompt: {ex.Message}");
        }
    }
    
    private async Task DeletePrompt()
    {
        if (promptToDelete != null)
        {
            try
            {
                await Http.DeleteAsync($"api/systemprompts/{promptToDelete.Id}");
                await LoadPrompts();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting prompt: {ex.Message}");
            }
        }
        
        CloseDialog();
    }
    
    private void CloseDialog()
    {
        showPromptDialog = false;
        showDeleteDialog = false;
    }
}
