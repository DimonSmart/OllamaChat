@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.JSInterop
@using System.Collections.ObjectModel
@using System.Text.Json
@using System.Net.Http.Json
@using ChatClient.Shared.Models
@using System.Threading
@using System.Text
@implements IAsyncDisposable
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Chat with AI Assistant</PageTitle>

<div class="chat-container">
    @if (showSystemPromptSelector)
    {
        <div class="system-prompt-selector">
            <h3>Choose a System Prompt to start your conversation</h3>

            @if (loadingPrompts)
            {
                <div class="loading-prompts">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading system prompts...</span>
                </div>

                <div class="mt-3">
                    <div class="alert alert-info">
                        <p>You can start with a default prompt while we're loading system prompts.</p>
                    </div>
                    <div class="system-prompt-actions mt-3">
                        <button class="btn btn-primary" @onclick="StartChatWithDefault">Start Chat with Default Prompt</button>
                        <a href="/system-prompts" class="btn btn-outline-secondary ms-2">
                            Manage System Prompts
                        </a>
                    </div>
                </div>
            }
            else if (!systemPrompts.Any())
            {
                <div class="alert alert-warning">
                    No system prompts found. Using default prompt.
                </div>
                <div class="system-prompt-actions mt-3">
                    <button class="btn btn-primary" @onclick="StartChatWithDefault">Start Chat with Default Prompt</button>
                    <a href="/system-prompts" class="btn btn-outline-secondary ms-2">
                        Manage System Prompts
                    </a>
                </div>
            }
            else
            {
                <div class="form-group mb-3">
                    <select class="form-control" @bind="selectedPromptId">
                        <option value="">-- Select a system prompt --</option>
                        @foreach (var prompt in systemPrompts)
                        {
                            <option value="@prompt.Id">@prompt.Name</option>
                        }
                    </select>
                </div>

                @if (!string.IsNullOrEmpty(selectedPromptId))
                {
                    var prompt = systemPrompts.FirstOrDefault(p => p.Id == selectedPromptId);
                    <div class="prompt-preview mb-3">
                        <h5>Prompt Preview:</h5>
                        <div class="prompt-content">@prompt?.Content</div>
                    </div>

                    <div class="form-group mb-3">
                        <label>Select Functions to use:</label>
                        <select multiple class="form-control" @bind="selectedFunctions">
                            @foreach (var fn in availableFunctions)
                            {
                                <option value="@fn.Name">@fn.Name &ndash; @fn.Description</option>
                            }
                        </select>
                        <small class="form-text text-muted">It is not recommended to select more than 5 functions.</small>
                    </div>
                }

                <div class="system-prompt-actions">
                    <button class="btn btn-primary" @onclick="StartChatWithSelectedPrompt"
                            disabled="@(string.IsNullOrEmpty(selectedPromptId))">
                        Start Chat
                    </button>
                    <a href="/system-prompts" class="btn btn-outline-secondary ms-2">
                        Manage System Prompts
                    </a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="chat-messages" @ref="messagesElement">
            @foreach (var message in Messages)
            {
                <div class="@(message.Role == Microsoft.Extensions.AI.ChatRole.User ? "user-message" : "assistant-message") message-container">
                    <div class="message-content">
                        @if (message == currentResponse && string.IsNullOrEmpty(message.Content))
                        {
                            <div class="loading-indicator" aria-label="Loading response...">
                                <span class="loading-dot"></span>
                                <span class="loading-dot"></span>
                                <span class="loading-dot"></span>
                            </div>
                        }
                        else
                        {
                            @message.Content
                            @if (IsStreamingResponse && message == currentResponse)
                            {
                                <span class="streaming-indicator"></span>
                            }
                        }
                    </div>
                    @if (!(message == currentResponse && string.IsNullOrEmpty(message.Content)))
                    {
                        <div class="message-time">@message.MsgDateTime.ToString("g")</div>
                    }
                </div>
            }
        </div>

        <div class="chat-input-container">
            <div class="input-group">
                <textarea @bind="inputText"
                          @bind:event="oninput"
                          @onkeydown="OnKeyPress"
                          class="chat-input form-control"
                          placeholder="Enter your message (Press Enter to send, Shift + Enter for new line)"
                          rows="1"
                          disabled="@isLoading"></textarea>
                @if (isLoading)
                {
                    <button @onclick="Cancel" class="btn btn-danger" title="Stop generating">
                        <i class="bi bi-stop-fill"></i> Stop
                    </button>
                }
                else
                {
                    <button @onclick="SendMessage" class="btn btn-primary" disabled="@(string.IsNullOrWhiteSpace(inputText) || isLoading)">
                        <i class="bi bi-send-fill"></i> Send
                    </button>

                    <button @onclick="RestartChat" class="btn btn-outline-secondary ms-2" title="New chat">
                        <i class="bi bi-plus-circle"></i> New Chat
                    </button>
                }
            </div>
        </div>
    }
</div>

@code {
    private string inputText = string.Empty;
    private bool isLoading = false;
    private ElementReference messagesElement;
    private List<Message> historyMessages = new();
    private CancellationTokenSource? cts;
    private Message? currentResponse;
    private List<SystemPrompt> systemPrompts = new();
    private bool showSystemPromptSelector = true;
    private string selectedPromptId = string.Empty;
    private SystemPrompt? selectedSystemPrompt;
    private string defaultSystemPromptContent = "You are a helpful assistant.";
    private bool loadingPrompts = true;
    private List<FunctionInfo> availableFunctions = new();
    private List<string> selectedFunctions = new();

    public List<Message> Messages { get; } = new();
    // Used to show the streaming cursor at the end of message while it's still being received
    private bool IsStreamingResponse => isLoading && currentResponse != null && !string.IsNullOrEmpty(currentResponse.Content);

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemPrompts();
        await LoadAvailableFunctions();
    }

    private async Task LoadSystemPrompts()
    {
        try
        {
            loadingPrompts = true;
            StateHasChanged();

            try
            {
                Console.WriteLine("Attempting to load system prompts...");
                var response = await Http.GetAsync("api/systemprompts");

                Console.WriteLine($"API response status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API response content: {content}");

                    systemPrompts = JsonSerializer.Deserialize<List<SystemPrompt>>(content,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<SystemPrompt>();
                }
                else
                {
                    Console.WriteLine("API returned an error status code. Using empty prompt list.");
                    systemPrompts = new List<SystemPrompt>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading system prompts: {ex}");
                systemPrompts = new List<SystemPrompt>();
            }
        }
        finally
        {
            loadingPrompts = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableFunctions()
    {
        try
        {
            var response = await Http.GetAsync("api/functions");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                availableFunctions = JsonSerializer.Deserialize<List<FunctionInfo>>(content,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<FunctionInfo>();
            }
        }
        catch
        {
            availableFunctions = new List<FunctionInfo>();
        }
    }

    private void StartChatWithDefault()
    {
        var defaultPrompt = new SystemPrompt
            {
                Name = "Default Assistant",
                Content = defaultSystemPromptContent
            };

        InitializeChat(defaultPrompt);
    }

    private void StartChatWithSelectedPrompt()
    {
        if (string.IsNullOrEmpty(selectedPromptId))
        {
            return;
        }

        var selectedPrompt = systemPrompts.FirstOrDefault(p => p.Id == selectedPromptId);
        if (selectedPrompt != null)
        {
            InitializeChat(selectedPrompt);
        }
    }

    private void InitializeChat(SystemPrompt prompt)
    {
        selectedSystemPrompt = prompt;
        showSystemPromptSelector = false;

        // Initialize the chat with the selected system prompt
        Messages.Clear();
        historyMessages.Clear();

        var systemMessage = new Message(prompt.Content, DateTime.Now, Microsoft.Extensions.AI.ChatRole.System);
        Messages.Add(systemMessage);
        historyMessages.Add(systemMessage);

        StateHasChanged();
    }

    private void RestartChat()
    {
        Messages.Clear();
        historyMessages.Clear();
        inputText = string.Empty;
        showSystemPromptSelector = true;
        selectedPromptId = string.Empty;
        selectedSystemPrompt = null;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(inputText))
            return;

        string userMessage = inputText.Trim();
        inputText = string.Empty;

        var userMessageObj = new Message(userMessage, DateTime.Now, Microsoft.Extensions.AI.ChatRole.User);
        Messages.Add(userMessageObj);
        historyMessages.Add(userMessageObj);

        await ScrollToBottom();
        try
        {
            isLoading = true;

            // Add the assistant's empty response to show the loading indicator
            currentResponse = new Message(string.Empty, DateTime.Now, Microsoft.Extensions.AI.ChatRole.Assistant);
            Messages.Add(currentResponse);

            // Update UI to show loader and scroll to ensure it's visible
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();

            cts = new CancellationTokenSource();

            var request = new HttpRequestMessage(HttpMethod.Post, "api/chat/stream")
                {
                    Content = JsonContent.Create(new AppChatRequest { Messages = historyMessages, FunctionNames = selectedFunctions })
                };
            request.SetBrowserResponseStreamingEnabled(true);

            using var response = await Http.SendAsync(
                request,
                HttpCompletionOption.ResponseHeadersRead,
                cts.Token);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
            }

            using var stream = await response.Content.ReadAsStreamAsync(cts.Token);
            using var reader = new StreamReader(stream);

            string? line;
            while ((line = await reader.ReadLineAsync(cts.Token)) != null)
            {
                if (string.IsNullOrEmpty(line) || !line.StartsWith("data: ")) continue;

                var jsonData = line.Substring(6);
                if (jsonData == "[DONE]") break;

                try
                {
                    var data = JsonSerializer.Deserialize<StreamResponse>(jsonData);
                    if (data?.content != null && currentResponse != null && !cts.Token.IsCancellationRequested)
                    {
                        currentResponse.Content += data.content;
                        await InvokeAsync(StateHasChanged);
                        await ScrollToBottom();
                    }
                }
                catch (JsonException)
                {
                    continue;
                }
            }

            if (currentResponse != null)
            {
                historyMessages.Add(currentResponse);
            }
        }
        catch (OperationCanceledException)
        {
            var cancelMessage = new Message("Operation cancelled by user.", DateTime.Now, Microsoft.Extensions.AI.ChatRole.System);
            Messages.Add(cancelMessage);
        }
        catch (Exception ex)
        {
            var errorMessage = new Message($"Error: {ex.Message}", DateTime.Now, Microsoft.Extensions.AI.ChatRole.System);
            Messages.Add(errorMessage);
        }
        finally
        {
            isLoading = false;
            currentResponse = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesElement);
        }
        catch
        {
            // Ignore any JavaScript interop errors
        }
    }

    private void Cancel()
    {
        cts?.Cancel();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        cts?.Dispose();
    }

    private class StreamResponse
    {
        public string? content { get; set; }
    }
}