@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using System.Collections.ObjectModel
@using System.Text.Json
@using System.Net.Http.Json
@using ChatClient.Shared.Models
@using System.Threading
@using System.Text
@using MudBlazor
@using ChatClient.Client.Pages
@using ChatClient.Client.Services
@implements IAsyncDisposable
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ChatService ChatService
@inject ClientSystemPromptService PromptService

<PageTitle>Chat with AI Assistant</PageTitle>

<div class="chat-container d-flex flex-column" style="height: calc(100vh - 64px);">
    @if (isLoadingInitialData)
    {
        <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="mt-2">Loading chat...</MudText>
        </MudOverlay>
    }
    else if (!chatStarted)
    {
        <MudCard Class="ma-auto" Style="max-width: 600px; width: 100%;">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Start New Chat</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="mb-4">Select a system prompt to define your AI assistant's behavior:</MudText>
                
                @if (systemPrompts.Count == 0)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                    <MudText>Loading system prompts...</MudText>
                }
                else
                {
                    <MudSelect T="SystemPrompt" Label="Select System Prompt" @bind-Value="selectedSystemPrompt" Variant="Variant.Outlined" FullWidth="true">
                        @foreach (var prompt in systemPrompts)
                        {
                            <MudSelectItem Value="@prompt">@prompt.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudExpansionPanels Dense="true" Class="mt-4">
                        <MudExpansionPanel Text="View Prompt Content">
                            <MudTextField T="string" Value="@(selectedSystemPrompt?.Content ?? "")" 
                                          Label="Prompt Content" 
                                          Lines="8"
                                          ReadOnly="true"
                                          Variant="Variant.Outlined" 
                                          Class="mt-2" />
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               FullWidth="true" 
                               Class="mt-4"
                               OnClick="StartChat">
                        Start Chat
                    </MudButton>
                      <MudButton Href="/system-prompts" 
                               Variant="Variant.Text" 
                               Color="Color.Secondary" 
                               FullWidth="true" 
                               Class="mt-2">
                        Manage System Prompts
                    </MudButton>
                }
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <div class="chat-messages flex-grow-1 pa-2" style="overflow-y: auto;" @ref="messagesElement">
            @foreach (var message in ChatService.Messages)
            {
                @if (message.Role != Microsoft.Extensions.AI.ChatRole.System) // Don't display system message
                {
                    <MudPaper Elevation="2" Class="@GetMessageClass(message)">
                        <MudText Typo="Typo.body1">@((MarkupString)Markdig.Markdown.ToHtml(message.Content ?? string.Empty))</MudText>
                        <MudText Typo="Typo.caption" Align="Align.Right" Class="mt-1">@message.MsgDateTime.ToString("g")</MudText>
                    </MudPaper>
                }
            }
            @if (isLoading)
            {
                 <MudPaper Elevation="0" Class="assistant-message message-container pa-2 mb-2 d-flex align-items-center">
                     <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                     <MudText Typo="Typo.body1"><i>Assistant is typing...</i></MudText>
                 </MudPaper>
            }
        </div>

        <MudPaper Elevation="3" Class="pa-2 mt-2">
            <MudExpansionPanels Dense="true">
                <MudExpansionPanel Text="Functions" @bind-IsExpanded="@functionsExpanded">
                    <FunctionSelector AvailableFunctions="availableFunctions" SelectedFunctions="selectedFunctions" SelectedFunctionsChanged="OnSelectedFunctionsChanged" Expanded="true" />
                </MudExpansionPanel>
            </MudExpansionPanels>
            <div class="d-flex flex-column">
                <MudTextField @bind-Value="inputText"
                             Label="Type your message"
                             Variant="Variant.Outlined"
                             Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Material.Filled.Send"
                             OnAdornmentClick="SendMessage"
                             OnKeyDown="OnKeyPress"
                             Immediate="true"
                             Lines="3"
                             Class="mt-2" />
                             
                <MudStack Direction="Row" Spacing="2" Class="mt-2">
                    @if (isLoading)
                    {
                        <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop">Stop</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="SendMessage" Color="Color.Primary" Variant="Variant.Filled" Disabled="@IsSendDisabled" StartIcon="@Icons.Material.Filled.Send">Send</MudButton>
                        <MudButton OnClick="RestartChat" Color="Color.Secondary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.AddCircle">New Chat</MudButton>
                    }
                </MudStack>
            </div>
        </MudPaper>
    }
</div>

@code {
    private string inputText = string.Empty;
    private bool isLoading = false;
    private bool isLoadingInitialData = true;
    private bool chatStarted = false;
    private ElementReference messagesElement;
    private List<SystemPrompt> systemPrompts = new();
    private SystemPrompt? selectedSystemPrompt;
    private List<FunctionInfo> availableFunctions = new();
    private List<string> selectedFunctions = new();
    private bool functionsExpanded = false;

    private EventCallback<List<string>> OnSelectedFunctionsChanged => EventCallback.Factory.Create<List<string>>(this, (List<string> v) => selectedFunctions = v);

    private string GetMessageClass(Message message) =>
        $"{(message.Role == Microsoft.Extensions.AI.ChatRole.User ? "user-message" : "assistant-message")} message-container pa-2 mb-2";

    private bool IsSendDisabled => string.IsNullOrWhiteSpace(inputText) || isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoadingInitialData = true;
        StateHasChanged();

        // Load system prompts and functions
        await LoadSystemPrompts();
        await LoadAvailableFunctions();

        // Set up chat service event handlers
        ChatService.LoadingStateChanged += OnLoadingStateChanged;
        ChatService.MessageReceived += OnMessageReceived;

        isLoadingInitialData = false;
        StateHasChanged();
    }

    private void OnLoadingStateChanged(bool loading)
    {
        isLoading = loading;
        StateHasChanged();
    }

    private async void OnMessageReceived()
    {
        StateHasChanged();
        await ScrollToBottom();
    }

    private async Task LoadSystemPrompts()
    {
        systemPrompts = await PromptService.GetSystemPromptsAsync();
        
        if (systemPrompts.Count == 0)
        {
            // Add default prompt if no prompts are available
            systemPrompts.Add(PromptService.GetDefaultSystemPrompt());
        }
        
        selectedSystemPrompt = systemPrompts.FirstOrDefault();
    }

    private async Task LoadAvailableFunctions()
    {
        try
        {
            var response = await Http.GetAsync("api/functions");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                availableFunctions = JsonSerializer.Deserialize<List<FunctionInfo>>(content,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<FunctionInfo>();
            }
            else
            {
                availableFunctions = new List<FunctionInfo>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available functions: {ex}");
            availableFunctions = new List<FunctionInfo>();
        }
    }

    private void StartChat()
    {
        if (selectedSystemPrompt == null)
        {
            selectedSystemPrompt = PromptService.GetDefaultSystemPrompt();
        }
        
        ChatService.InitializeChat(selectedSystemPrompt);
        chatStarted = true;
        StateHasChanged();
    }

    private void RestartChat()
    {
        chatStarted = false;
        ChatService.ClearChat();
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(inputText) || isLoading)
            return;

        string userMessage = inputText.Trim();
        inputText = string.Empty;

        await ChatService.SendMessageAsync(userMessage, selectedFunctions);
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesElement);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }

    private void Cancel()
    {
        ChatService.Cancel();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    public ValueTask DisposeAsync()
    {
        ChatService.LoadingStateChanged -= OnLoadingStateChanged;
        ChatService.MessageReceived -= OnMessageReceived;
        return ValueTask.CompletedTask;
    }
}