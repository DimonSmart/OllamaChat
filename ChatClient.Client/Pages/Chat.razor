@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using System.Collections.ObjectModel
@using System.Text.Json
@using System.Net.Http.Json
@using ChatClient.Shared.Models
@using System.Threading
@using System.Text
@using MudBlazor
@using ChatClient.Client.Pages
@implements IAsyncDisposable
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Chat with AI Assistant</PageTitle>

<div class="chat-container">
    @if (showSystemPromptSelector)
    {
        <div class="system-prompt-selector">
            <h3>Choose a System Prompt to start your conversation</h3>
            @if (loadingPrompts)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                <MudText Class="mt-2">Loading system prompts...</MudText>
                <MudAlert Severity="Severity.Info" Class="mt-3">
                    You can start with a default prompt while we're loading system prompts.
                </MudAlert>
                <div class="system-prompt-actions mt-3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartChatWithDefault">Start Chat with Default Prompt</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Href="/system-prompts" Class="ms-2">Manage System Prompts</MudButton>
                </div>
            }
            else if (!systemPrompts.Any())
            {
                <MudAlert Severity="Severity.Warning">No system prompts found. Using default prompt.</MudAlert>
                <div class="system-prompt-actions mt-3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartChatWithDefault">Start Chat with Default Prompt</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Href="/system-prompts" Class="ms-2">Manage System Prompts</MudButton>
                </div>
            }
            else
            {
                <MudSelect T="string" Label="System Prompt" @bind-Value="selectedPromptId" Dense="true" Class="mb-3">
                    <MudSelectItem T="string" Value="@null">-- Select a system prompt --</MudSelectItem>
                    @foreach (var prompt in systemPrompts)
                    {
                        <MudSelectItem T="string" Value="@prompt.Id">@prompt.Name</MudSelectItem>
                    }
                </MudSelect>
                @if (!string.IsNullOrEmpty(selectedPromptId))
                {
                    var prompt = systemPrompts.FirstOrDefault(p => p.Id == selectedPromptId);
                    <MudPaper Class="pa-2 mb-3">
                        <MudText Typo="Typo.subtitle2">Prompt Preview:</MudText>
                        <MudText>@prompt?.Content</MudText>
                    </MudPaper>
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Functions" Expanded="@functionsExpanded" ExpandedChanged="@((b) => functionsExpanded = b)">
                            <FunctionSelector AvailableFunctions="availableFunctions" SelectedFunctions="selectedFunctions" SelectedFunctionsChanged="OnSelectedFunctionsChanged" Expanded="true" />
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
                <div class="system-prompt-actions">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@string.IsNullOrEmpty(selectedPromptId)" OnClick="StartChatWithSelectedPrompt">Start Chat</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Href="/system-prompts" Class="ms-2">Manage System Prompts</MudButton>
                </div>
            }
        </div>
    }
    else
    {
        <div class="chat-messages" @ref="messagesElement">
            @foreach (var message in Messages)
            {
                <MudPaper Class="@GetMessageClass(message)">
                    <MudText>@message.Content</MudText>
                    <MudText Typo="Typo.caption" Align="Align.Right">@message.MsgDateTime.ToString("g")</MudText>
                </MudPaper>
            }
        </div>
        <MudExpansionPanels Class="mb-2">
            <MudExpansionPanel Text="Functions" Expanded="@functionsExpanded" ExpandedChanged="@((b) => functionsExpanded = b)">
                <FunctionSelector AvailableFunctions="availableFunctions" SelectedFunctions="selectedFunctions" SelectedFunctionsChanged="OnSelectedFunctionsChanged" Expanded="true" />
            </MudExpansionPanel>
        </MudExpansionPanels>
        <div class="chat-input-container">
            <MudTextField T="string" @bind-Value="inputText" Placeholder="Enter your message (Press Enter to send, Shift + Enter for new line)" Lines="1" Disabled="@isLoading" Class="chat-input mb-2" Immediate="true" OnKeyDown="OnKeyPress" />
            <MudStack Direction="Row" Spacing="2">
                @if (isLoading)
                {
                    <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Filled"><MudIcon Icon="@Icons.Material.Filled.Stop" /> Stop</MudButton>
                }
                else
                {
                    <MudButton OnClick="SendMessage" Color="Color.Primary" Variant="Variant.Filled" Disabled="@IsSendDisabled">
                        <MudIcon Icon="@Icons.Material.Filled.Send" /> Send
                    </MudButton>
                    <MudButton OnClick="RestartChat" Color="Color.Secondary" Variant="Variant.Outlined"><MudIcon Icon="@Icons.Material.Filled.AddCircle" /> New Chat</MudButton>
                }
            </MudStack>
        </div>
    }
</div>

@code {
    private string inputText = string.Empty;
    private bool isLoading = false;
    private ElementReference messagesElement;
    private List<Message> historyMessages = new();
    private CancellationTokenSource? cts;
    private Message? currentResponse;
    private List<SystemPrompt> systemPrompts = new();
    private bool showSystemPromptSelector = true;
    private string selectedPromptId = string.Empty;
    private SystemPrompt? selectedSystemPrompt;
    private string defaultSystemPromptContent = "You are a helpful assistant.";
    private bool loadingPrompts = true;
    private List<FunctionInfo> availableFunctions = new();
    private List<string> selectedFunctions = new();
    private bool functionsExpanded = false;

    private EventCallback<List<string>> OnSelectedFunctionsChanged => EventCallback.Factory.Create<List<string>>(this, (List<string> v) => selectedFunctions = v);

    public List<Message> Messages { get; } = new();
    private bool IsStreamingResponse => isLoading && currentResponse != null && !string.IsNullOrEmpty(currentResponse.Content);

    private string GetMessageClass(Message message) =>
        $"{(message.Role == Microsoft.Extensions.AI.ChatRole.User ? "user-message" : "assistant-message")} message-container pa-2 mb-2";

    private bool IsSendDisabled => string.IsNullOrWhiteSpace(inputText) || isLoading;

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemPrompts();
        await LoadAvailableFunctions();
    }

    private async Task LoadSystemPrompts()
    {
        try
        {
            loadingPrompts = true;
            StateHasChanged();

            try
            {
                Console.WriteLine("Attempting to load system prompts...");
                var response = await Http.GetAsync("api/systemprompts");

                Console.WriteLine($"API response status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API response content: {content}");

                    systemPrompts = JsonSerializer.Deserialize<List<SystemPrompt>>(content,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<SystemPrompt>();
                }
                else
                {
                    Console.WriteLine("API returned an error status code. Using empty prompt list.");
                    systemPrompts = new List<SystemPrompt>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading system prompts: {ex}");
                systemPrompts = new List<SystemPrompt>();
            }
        }
        finally
        {
            loadingPrompts = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableFunctions()
    {
        try
        {
            var response = await Http.GetAsync("api/functions");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                availableFunctions = JsonSerializer.Deserialize<List<FunctionInfo>>(content,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<FunctionInfo>();
            }
        }
        catch
        {
            availableFunctions = new List<FunctionInfo>();
        }
    }

    private void StartChatWithDefault()
    {
        var defaultPrompt = new SystemPrompt
        {
            Name = "Default Assistant",
            Content = defaultSystemPromptContent
        };

        InitializeChat(defaultPrompt);
    }

    private void StartChatWithSelectedPrompt()
    {
        if (string.IsNullOrEmpty(selectedPromptId))
        {
            return;
        }

        var selectedPrompt = systemPrompts.FirstOrDefault(p => p.Id == selectedPromptId);
        if (selectedPrompt != null)
        {
            InitializeChat(selectedPrompt);
        }
    }

    private void InitializeChat(SystemPrompt prompt)
    {
        selectedSystemPrompt = prompt;
        showSystemPromptSelector = false;

        Messages.Clear();
        historyMessages.Clear();

        var systemMessage = new Message(prompt.Content, DateTime.Now, Microsoft.Extensions.AI.ChatRole.System);
        Messages.Add(systemMessage);
        historyMessages.Add(systemMessage);

        StateHasChanged();
    }

    private void RestartChat()
    {
        Messages.Clear();
        historyMessages.Clear();
        inputText = string.Empty;
        showSystemPromptSelector = true;
        selectedPromptId = string.Empty;
        selectedSystemPrompt = null;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(inputText))
            return;

        string userMessage = inputText.Trim();
        inputText = string.Empty;

        var userMessageObj = new Message(userMessage, DateTime.Now, Microsoft.Extensions.AI.ChatRole.User);
        Messages.Add(userMessageObj);
        historyMessages.Add(userMessageObj);

        await ScrollToBottom();
        try
        {
            isLoading = true;

            currentResponse = new Message(string.Empty, DateTime.Now, Microsoft.Extensions.AI.ChatRole.Assistant);
            Messages.Add(currentResponse);

            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();

            cts = new CancellationTokenSource();

            var request = new HttpRequestMessage(HttpMethod.Post, "api/chat/stream")
            {
                Content = JsonContent.Create(new AppChatRequest { Messages = historyMessages, FunctionNames = selectedFunctions })
            };
            request.SetBrowserResponseStreamingEnabled(true);

            using var response = await Http.SendAsync(
                request,
                HttpCompletionOption.ResponseHeadersRead,
                cts.Token);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
            }

            using var stream = await response.Content.ReadAsStreamAsync(cts.Token);
            using var reader = new StreamReader(stream);

            string? line;
            while ((line = await reader.ReadLineAsync(cts.Token)) != null)
            {
                if (string.IsNullOrEmpty(line) || !line.StartsWith("data: ")) continue;

                var jsonData = line.Substring(6);
                if (jsonData == "[DONE]") break;

                try
                {
                    var data = JsonSerializer.Deserialize<StreamResponse>(jsonData);
                    if (data?.content != null && currentResponse != null && !cts.Token.IsCancellationRequested)
                    {
                        currentResponse.Content += data.content;
                        await InvokeAsync(StateHasChanged);
                        await ScrollToBottom();
                    }
                }
                catch (JsonException)
                {
                    continue;
                }
            }

            if (currentResponse != null)
            {
                historyMessages.Add(currentResponse);
            }
        }
        catch (OperationCanceledException)
        {
            var cancelMessage = new Message("Operation cancelled by user.", DateTime.Now, Microsoft.Extensions.AI.ChatRole.System);
            Messages.Add(cancelMessage);
        }
        catch (Exception ex)
        {
            var errorMessage = new Message($"Error: {ex.Message}", DateTime.Now, Microsoft.Extensions.AI.ChatRole.System);
            Messages.Add(errorMessage);
        }
        finally
        {
            isLoading = false;
            currentResponse = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesElement);
        }
        catch
        {
        }
    }

    private void Cancel()
    {
        cts?.Cancel();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    public ValueTask DisposeAsync()
    {
        cts?.Dispose();
        return ValueTask.CompletedTask;
    }

    private class StreamResponse
    {
        public string? content { get; set; }
    }
}