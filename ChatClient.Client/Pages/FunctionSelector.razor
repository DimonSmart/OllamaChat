@using ChatClient.Shared.Models
@using MudBlazor

<MudCollapse Expanded="@Expanded" ExpandedChanged="@(v => ExpandedChanged.InvokeAsync(v))">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.subtitle1">Select Functions to use:</MudText>
        <MudList T="string" Dense="true">
            @foreach (var fn in AvailableFunctions)
            {
                <MudListItem>
                    <MudCheckBox T="Boolean" ValueChanged="@(async (bool v) => await OnFunctionToggled(fn.Name, v))" />
                    <MudText Class="ms-2">@fn.Name â€” @fn.Description</MudText>
                </MudListItem>
            }
        </MudList>
        <MudText Typo="Typo.caption" Color="Color.Secondary">
            It is not recommended to select more than 5 functions.
        </MudText>
    </MudPaper>
</MudCollapse>

@code {
    [Parameter] public List<FunctionInfo> AvailableFunctions { get; set; } = new();
    [Parameter] public List<string> SelectedFunctions { get; set; } = new();
    [Parameter] public EventCallback<List<string>> SelectedFunctionsChanged { get; set; }
    [Parameter] public bool Expanded { get; set; }
    [Parameter] public EventCallback<bool> ExpandedChanged { get; set; }

    private HashSet<string> internalSelectedFunctions = new();

    protected override void OnParametersSet()
    {
        internalSelectedFunctions = new HashSet<string>(SelectedFunctions);
    }

    private async Task OnFunctionToggled(string name, bool isChecked)
    {
        if (isChecked)
        {
            if (!internalSelectedFunctions.Contains(name))
                internalSelectedFunctions.Add(name);
        }
        else
        {
            internalSelectedFunctions.Remove(name);
        }

        await SelectedFunctionsChanged.InvokeAsync(internalSelectedFunctions.ToList());
    }
}
