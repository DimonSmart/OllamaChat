@page "/app-settings"
@using ChatClient.Api.Client.Services
@using ChatClient.Api.Services
@using ChatClient.Api.Client.Components
@using ChatClient.Shared.Models
@using ChatClient.Shared.Services
@using System.Text.Json
@inject IUserSettingsService UserSettingsService
@inject IOllamaClientService OllamaService
@inject ISnackbar Snackbar
@inject ILogger<AppSettings> Logger

<PageTitle>Application Settings</PageTitle>

<OllamaCheck>
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudText Class="page-header">Application Settings</MudText>

        @if (_loading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="ml-2">Loading settings...</MudText>
        }
        else
        {
            <MudPaper Elevation="3" Class="pa-3 rounded-lg">
                <MudForm @ref="_form" Model="@_settings">
                    <MudCard Class="mb-4" Elevation="1">
                        <MudCardContent>
                            <ServerModelPicker Value="_defaultModel" ValueChanged="OnDefaultModelChanged" ShowClearButton="true" />
                            <MudText Typo="Typo.caption" Class="mt-2">
                                This server and model will be selected by default when starting a new chat.
                            </MudText>
                        </MudCardContent>
                    </MudCard>

                    <MudCard Class="mb-4" Elevation="1">
                        <MudCardContent Class="pt-0">
                            <MudSelect T="AppChatHistoryMode" Label="History Processing" @bind-Value="_settings.ChatHistoryMode" Variant="Variant.Outlined" Dense="true">
                                <MudSelectItem Value="@AppChatHistoryMode.None">None</MudSelectItem>
                                <MudSelectItem Value="@AppChatHistoryMode.Truncate">Truncate</MudSelectItem>
                                <MudSelectItem Value="@AppChatHistoryMode.Summarize">Summarize</MudSelectItem>
                            </MudSelect>
                            <MudText Typo="Typo.caption" Class="mt-2">
                                Determines how message history is prepared before sending to the model.
                            </MudText>
                        </MudCardContent>
                    </MudCard>

                    <MudCard Class="mb-4" Elevation="1">
                        <MudCardContent>
                            <MudTextField T="string" Label="Default Chat Message" @bind-Value="_settings.DefaultChatMessage"
                                          Lines="3" Variant="Variant.Outlined" HelperText="Pre-filled message in the chat input (useful for testing)" />
                        </MudCardContent>
                    </MudCard>

                    <MudCard Class="mb-4" Elevation="1">
                        <MudCardContent>
                            <MudTextField T="string" Label="Default Multiagent Chat Message" @bind-Value="_settings.DefaultMultiAgentChatMessage"
                                          Lines="3" Variant="Variant.Outlined" HelperText="Pre-filled message in the multiagent chat input" />
                        </MudCardContent>
                    </MudCard>

                    <MudCard Class="mb-4" Elevation="1">
                        <MudCardHeader Class="pb-2">
                            <MudText Class="section-header">Chat Participants</MudText>
                        </MudCardHeader>
                        <MudCardContent Class="pt-0">
                            <MudTextField T="string" Label="User Name" @bind-Value="_settings.UserName"
                                          Variant="Variant.Outlined" Class="mb-3"
                                          HelperText="Display name for user messages (leave empty to hide avatar)" />
                            <MudTextField T="string" Label="Agent Name" @bind-Value="_settings.AgentName"
                                          Variant="Variant.Outlined"
                                          HelperText="Display name for AI assistant messages (leave empty to hide avatar)" />
                        </MudCardContent>
                    </MudCard>

                <MudCard Class="mb-4" Elevation="1">
                    <MudCardContent Class="pt-0">
                        <MudTextField T="string" Label="Stop Agent Name" @bind-Value="_settings.StopAgentName"
                                      Variant="Variant.Outlined" HelperText="Agent name that triggers chat termination" />
                    </MudCardContent>
                </MudCard>

                <MudCard Class="mb-4" Elevation="1">
                    <MudCardContent>
                        <ServerModelPicker Value="_embeddingModel" ValueChanged="OnEmbeddingModelChanged" ShowClearButton="true" />
                        <MudText Typo="Typo.caption" Class="mt-2">
                            Model used for generating embeddings.
                        </MudText>
                        <MudNumericField T="int" @bind-Value="_settings.RagLineChunkSize" Label="Line Chunk Size" Min="1" Variant="Variant.Outlined" Class="mt-4" />
                        <MudNumericField T="int" @bind-Value="_settings.RagParagraphChunkSize" Label="Paragraph Chunk Size" Min="1" Variant="Variant.Outlined" Class="mt-4" />
                        <MudNumericField T="int" @bind-Value="_settings.RagParagraphOverlap" Label="Paragraph Overlap" Min="0" Variant="Variant.Outlined" Class="mt-4" />
                        <MudText Typo="Typo.caption" Class="mt-2">Text chunking parameters for building RAG indexes.</MudText>
                    </MudCardContent>
                </MudCard>

                    <MudButtonGroup Class="mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveSettings" Size="Size.Medium">
                            Save Application Settings
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ResetSettings" Size="Size.Medium">
                            Reset
                        </MudButton>
                    </MudButtonGroup>
                </MudForm>
            </MudPaper>
        }
    </MudContainer>
</OllamaCheck>

@code {
    private UserSettings _settings = new();
    private ServerModel _defaultModel = new(Guid.Empty, string.Empty);
    private ServerModel _embeddingModel = new(Guid.Empty, string.Empty);
    private bool _loading = true;
    private MudForm? _form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            await LoadSettings();
        }
        finally
        {
            _loading = false;
        }
    }

    private Task OnDefaultModelChanged(ServerModel model)
    {
        _defaultModel = model;
        _settings.DefaultModel = model;
        return Task.CompletedTask;
    }

    private Task OnEmbeddingModelChanged(ServerModel model)
    {
        _embeddingModel = model;
        _settings.EmbeddingModel = model;
        return Task.CompletedTask;
    }

    private async Task LoadSettings()
    {
        try
        {
            _settings = await UserSettingsService.GetSettingsAsync();
            _defaultModel = _settings.DefaultModel;
            _embeddingModel = _settings.EmbeddingModel;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading settings");
            Snackbar.Add("Failed to load settings.", Severity.Error);
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            if (_settings.EmbeddingModel.ServerId != Guid.Empty && !string.IsNullOrWhiteSpace(_settings.EmbeddingModel.ModelName))
            {
                var models = await OllamaService.GetModelsAsync(_settings.EmbeddingModel.ServerId);
                var exists = models.Any(m => m.Name.Equals(_settings.EmbeddingModel.ModelName, StringComparison.OrdinalIgnoreCase));
                if (!exists)
                {
                    Snackbar.Add($"Embedding model '{_settings.EmbeddingModel.ModelName}' not found.", Severity.Error);
                    return;
                }
            }

            await UserSettingsService.SaveSettingsAsync(_settings);
            Snackbar.Add("Application settings saved successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving settings");
            Snackbar.Add($"Failed to save settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task ResetSettings()
    {
        await LoadSettings();
        Snackbar.Add("Settings reset to last saved values", Severity.Info);
    }
}
