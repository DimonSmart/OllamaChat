@page "/mcp-playground"
@using ChatClient.Shared.Models
@using System.Text.Json
@using System.Linq
@using ModelContextProtocol.Client
@using ChatClient.Api.Services
@inject IMcpClientService McpClientService
@inject ISnackbar Snackbar

<PageTitle>MCP Playground</PageTitle>
<MudText Class="page-header">MCP Playground</MudText>

<MudStack Spacing="2">
    <MudSelect Label="Server" T="string" Value="@selectedServer" ValueChanged="OnServerChanged" Dense="true">
        @foreach (var s in servers)
        {
            <MudSelectItem Value="@s">@s</MudSelectItem>
        }
    </MudSelect>

    <MudSelect Label="Function" T="string" Value="@selectedFunction" ValueChanged="OnFunctionChanged" Disabled="@(!tools.Any())" Dense="true">
        @foreach (var t in tools)
        {
            <MudSelectItem Value="@t.Name">@t.Name</MudSelectItem>
        }
    </MudSelect>

    @if (fields.Any())
    {
        @foreach (var f in fields)
        {
            @switch (f.Type)
            {
                case "boolean":
                    <MudSwitch T="bool" Checked="@(parameters.TryGetValue(f.Name, out var val) && val is bool b && b)"
                               CheckedChanged="v => parameters[f.Name] = v"
                               Label="@f.Name" />
                    break;
                case "integer":
                    <MudNumericField T="int?" Value="@(parameters[f.Name] as int?)"
                                     ValueChanged="v => parameters[f.Name] = v"
                                     Label="@f.Name" />
                    break;
                case "number":
                    <MudNumericField T="double?" Value="@(parameters[f.Name] as double?)"
                                     ValueChanged="v => parameters[f.Name] = v"
                                     Label="@f.Name" />
                    break;
                default:
                    <MudTextField T="string" Value="@(parameters.TryGetValue(f.Name, out var obj) ? obj?.ToString() : string.Empty)"
                                  ValueChanged="v => parameters[f.Name] = v"
                                  Label="@f.Name" />
                    break;
            }
        }
    }

    <MudButton Variant="Variant.Filled" OnClick="Call" Disabled="@(string.IsNullOrEmpty(selectedServer) || string.IsNullOrEmpty(selectedFunction))">Go</MudButton>

    <MudSwitch @bind-Value="showRaw" 
               Label="@(showRaw ? "Raw" : "Simplified")" 
               Disabled="@string.IsNullOrEmpty(rawResult)"
               Color="@(showRaw ? Color.Warning : Color.Success)" />

    @if (!string.IsNullOrEmpty(rawResult) || !string.IsNullOrEmpty(contentResult))
    {
        <MudPaper Class="pa-4 mcp-result" Outlined="true">
            <pre>@(showRaw ? rawResult : contentResult)</pre>
        </MudPaper>
    }
</MudStack>

@code {
    private readonly List<string> servers = [];
    private readonly List<McpToolInfo> tools = [];
    private readonly Dictionary<string, McpClientTool> toolMap = new(StringComparer.OrdinalIgnoreCase);
    private readonly List<FieldInfo> fields = [];
    private readonly Dictionary<string, object?> parameters = new(StringComparer.OrdinalIgnoreCase);
    private IMcpClient? currentClient;
    private string? selectedServer;
    private string? selectedFunction;
    private string? rawResult;
    private string? contentResult;
    private bool showRaw = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var clients = await McpClientService.GetMcpClientsAsync();
            servers.AddRange(clients.Select(c => c.ServerInfo.Name));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading servers: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnServerChanged(string value)
    {
        selectedServer = value;
        selectedFunction = null;
        tools.Clear();
        toolMap.Clear();
        fields.Clear();
        parameters.Clear();
        rawResult = null;
        contentResult = null;
        if (string.IsNullOrEmpty(selectedServer))
            return;
        try
        {
            var clients = await McpClientService.GetMcpClientsAsync();
            currentClient = clients.FirstOrDefault(c => string.Equals(c.ServerInfo.Name, selectedServer, StringComparison.OrdinalIgnoreCase));
            if (currentClient == null)
                return;
            var list = await McpClientService.GetMcpTools(currentClient);
            foreach (var t in list)
            {
                tools.Add(new McpToolInfo(t.Name, t.Description, t.JsonSchema));
                toolMap[t.Name] = t;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading tools: {ex.Message}", Severity.Error);
        }
    }

    private void OnFunctionChanged(string value)
    {
        selectedFunction = value;
        fields.Clear();
        parameters.Clear();
        rawResult = null;
        contentResult = null;
        var tool = tools.FirstOrDefault(t => t.Name == selectedFunction);
        if (tool == null)
            return;
        if (tool.JsonSchema.ValueKind == JsonValueKind.Undefined)
            return;
        if (tool.JsonSchema.TryGetProperty("properties", out var props))
        {
            foreach (var prop in props.EnumerateObject())
            {
                var type = prop.Value.TryGetProperty("type", out var t) ? t.GetString() : "string";
                fields.Add(new FieldInfo(prop.Name, type ?? "string"));
                parameters[prop.Name] = null;
            }
        }
    }

    private async Task Call()
    {
        if (currentClient == null || string.IsNullOrEmpty(selectedFunction))
            return;
        if (!toolMap.TryGetValue(selectedFunction, out var tool))
            return;
        try
        {
            var args = new Dictionary<string, object?>();
            foreach (var f in fields)
            {
                if (!parameters.TryGetValue(f.Name, out var val))
                    continue;
                if (val is string s && (f.Type == "array" || f.Type == "object"))
                {
                    try
                    {
                        val = JsonSerializer.Deserialize<JsonElement>(s);
                    }
                    catch
                    {
                        continue;
                    }
                }
                args[f.Name] = val;
            }
            var obj = await tool.CallAsync(args, null, null);
            var elem = JsonSerializer.SerializeToElement(obj);
            rawResult = JsonSerializer.Serialize(elem, new JsonSerializerOptions { WriteIndented = true });
            contentResult = FormatContent(elem);
            showRaw = contentResult is null;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error calling function: {ex.Message}", Severity.Error);
        }
    }

    private static string? FormatContent(JsonElement elem)
    {
        if (!elem.TryGetProperty("content", out var content))
            return null;
        return content.ValueKind switch
        {
            JsonValueKind.Array => string.Join("\n", content.EnumerateArray().Select(FormatContentItem)),
            JsonValueKind.String => FormatStringContent(content.GetString()),
            _ => JsonSerializer.Serialize(content, new JsonSerializerOptions { WriteIndented = true })
        };
    }

    private static string FormatContentItem(JsonElement elem)
    {
        if (elem.ValueKind == JsonValueKind.Object && elem.TryGetProperty("text", out var text) && text.ValueKind == JsonValueKind.String)
            return FormatStringContent(text.GetString());
        return JsonSerializer.Serialize(elem, new JsonSerializerOptions { WriteIndented = true });
    }

    private static string FormatStringContent(string? str)
    {
        if (string.IsNullOrEmpty(str))
            return string.Empty;
        try
        {
            using var doc = JsonDocument.Parse(str);
            return JsonSerializer.Serialize(doc.RootElement, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return str;
        }
    }

    private sealed record FieldInfo(string Name, string Type);
}
