@using ChatClient.Domain.Models
@using MudBlazor

<MudCollapse Expanded="@Expanded" ExpandedChanged="@(v => ExpandedChanged.InvokeAsync(v))">
    <MudCard Outlined="true" Class="pa-4">
        <MudCardHeader Class="pb-2">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Function Settings</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pt-0">
            <MudNumericField T="int" Value="@AutoSelectCount" ValueChanged="OnAutoSelectCountChanged" Class="mt-2" Min="0" Max="10"
                             Variant="Variant.Outlined" Label="Auto-select count" Immediate="true" 
                             Style="max-width: 200px;"
                             title="Set auto-select count to 0 to choose functions manually. It is not recommended to select more than 5 functions." />
            <MudExpansionPanels Class="mt-2">
                @foreach (var group in AvailableFunctions.GroupBy(f => f.ServerName))
                {
                    <MudExpansionPanel Text="@group.Key">
                        <MudStack Spacing="1">
                            <MudCheckBox T="bool" Label="Select All"
                                         ValueChanged="@(async (bool v) => await OnServerToggled(group.Key, v))"
                                         Value="@serverSelections.GetValueOrDefault(group.Key)"
                                         Dense="true" Disabled="@(AutoSelectCount > 0)" />

                            @foreach (var fn in group)
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="ml-4">
                                    <MudCheckBox T="bool"
                                                 ValueChanged="@(async (bool v) => await OnFunctionToggled(fn, v))"
                                                 Value="@internalSelectedFunctions.Contains(fn.Name)"
                                                 Dense="true" Disabled="@(AutoSelectCount > 0)" />
                                    <div style="flex-grow:1">
                                        <MudText Typo="Typo.body2" Class="mb-0">
                                            <strong>@fn.DisplayName</strong> - @fn.Description
                                        </MudText>
                                    </div>
                                </MudStack>
                            }
                        </MudStack>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudCardContent>
    </MudCard>
</MudCollapse>

@code {
    [Parameter] public List<FunctionInfo> AvailableFunctions { get; set; } = new();
    [Parameter] public List<string> SelectedFunctions { get; set; } = new();
    [Parameter] public EventCallback<List<string>> SelectedFunctionsChanged { get; set; }
    [Parameter] public bool Expanded { get; set; }
    [Parameter] public EventCallback<bool> ExpandedChanged { get; set; }
    [Parameter] public int AutoSelectCount { get; set; }
    [Parameter] public EventCallback<int> AutoSelectCountChanged { get; set; }

    private HashSet<string> internalSelectedFunctions = new();
    private Dictionary<string, bool> serverSelections = new();

    protected override void OnParametersSet()
    {
        internalSelectedFunctions = new HashSet<string>(SelectedFunctions);
        serverSelections = AvailableFunctions
            .GroupBy(f => f.ServerName)
            .ToDictionary(g => g.Key, g => g.All(f => internalSelectedFunctions.Contains(f.Name)));
    }

    private async Task OnServerToggled(string serverName, bool isChecked)
    {
        var serverFunctions = AvailableFunctions.Where(f => f.ServerName == serverName).Select(f => f.Name);
        
        foreach (var fn in serverFunctions)
        {
            UpdateFunctionSelection(fn, isChecked);
        }
        
        serverSelections[serverName] = isChecked;
        await NotifySelectionChanged();
    }

    private async Task OnFunctionToggled(FunctionInfo fn, bool isChecked)
    {
        UpdateFunctionSelection(fn.Name, isChecked);
        UpdateServerSelection(fn.ServerName);
        await NotifySelectionChanged();
    }

    private void UpdateFunctionSelection(string functionName, bool isSelected)
    {
        if (isSelected)
            internalSelectedFunctions.Add(functionName);
        else
            internalSelectedFunctions.Remove(functionName);
    }

    private void UpdateServerSelection(string serverName)
    {
        serverSelections[serverName] = AvailableFunctions
            .Where(f => f.ServerName == serverName)
            .All(f => internalSelectedFunctions.Contains(f.Name));
    }

    private async Task NotifySelectionChanged()
    {
        await SelectedFunctionsChanged.InvokeAsync(internalSelectedFunctions.ToList());
    }

    private async Task OnAutoSelectCountChanged(int value)
    {
        AutoSelectCount = value;
        StateHasChanged();
        await AutoSelectCountChanged.InvokeAsync(value);
    }
}
