@using ChatClient.Shared.Models
@using MudBlazor

<MudCollapse Expanded="@Expanded" ExpandedChanged="@(v => ExpandedChanged.InvokeAsync(v))">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.subtitle1">Select Functions to use:</MudText>
        <MudCheckBox T="bool" Checked="@AutoSelectFunctions" CheckedChanged="OnAutoSelectFunctionsChanged" Class="mt-2"
                     Color="Color.Primary" Label="Auto-select relevant functions" />
        <MudNumericField T="int" Value="@AutoSelectCount" ValueChanged="OnAutoSelectCountChanged" Class="mt-2" Min="1" Max="10"
                         Disabled="!AutoSelectFunctions" Variant="Variant.Outlined" Label="Function count"
                         Immediate="true" />
        <MudExpansionPanels Class="mt-2">
            @foreach (var group in AvailableFunctions.GroupBy(f => f.ServerName))
            {
                <MudExpansionPanel Text="@group.Key">
                    <MudStack Spacing="1">
                        <MudCheckBox T="bool" Label="Select All"
                                     ValueChanged="@(async (bool v) => await OnServerToggled(group.Key, v))"
                                     Value="@serverSelections.GetValueOrDefault(group.Key)"
                                     Dense="true" Disabled="@AutoSelectFunctions" />

                        @foreach (var fn in group)
                        {
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="ml-4">
                                <MudCheckBox T="bool"
                                             ValueChanged="@(async (bool v) => await OnFunctionToggled(fn, v))"
                                             Value="@internalSelectedFunctions.Contains(fn.Name)"
                                             Dense="true" Disabled="@AutoSelectFunctions" />
                                <div style="flex-grow:1">
                                    <MudText Typo="Typo.body2" Class="mb-0">
                                        <strong>@fn.DisplayName</strong> - @fn.Description
                                    </MudText>
                                </div>
                            </MudStack>
                        }
                    </MudStack>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
        <MudText Typo="Typo.caption" Color="Color.Secondary">
            It is not recommended to select more than 5 functions.
        </MudText>
    </MudPaper>
</MudCollapse>

@code {
    [Parameter] public List<FunctionInfo> AvailableFunctions { get; set; } = new();
    [Parameter] public List<string> SelectedFunctions { get; set; } = new();
    [Parameter] public EventCallback<List<string>> SelectedFunctionsChanged { get; set; }
    [Parameter] public bool Expanded { get; set; }
    [Parameter] public EventCallback<bool> ExpandedChanged { get; set; }
    [Parameter] public bool AutoSelectFunctions { get; set; }
    [Parameter] public EventCallback<bool> AutoSelectFunctionsChanged { get; set; }
    [Parameter] public int AutoSelectCount { get; set; }
    [Parameter] public EventCallback<int> AutoSelectCountChanged { get; set; }

    private HashSet<string> internalSelectedFunctions = new();
    private Dictionary<string, bool> serverSelections = new();

    protected override void OnParametersSet()
    {
        internalSelectedFunctions = new HashSet<string>(SelectedFunctions);
        serverSelections = AvailableFunctions
            .GroupBy(f => f.ServerName)
            .ToDictionary(g => g.Key, g => g.All(f => internalSelectedFunctions.Contains(f.Name)));
    }

    private async Task OnServerToggled(string serverName, bool isChecked)
    {
        var serverFunctions = AvailableFunctions.Where(f => f.ServerName == serverName).Select(f => f.Name);
        if (isChecked)
        {
            foreach (var fn in serverFunctions)
                internalSelectedFunctions.Add(fn);
        }
        else
        {
            foreach (var fn in serverFunctions)
                internalSelectedFunctions.Remove(fn);
        }
        serverSelections[serverName] = isChecked;
        await SelectedFunctionsChanged.InvokeAsync(internalSelectedFunctions.ToList());
    }

    private async Task OnFunctionToggled(FunctionInfo fn, bool isChecked)
    {
        if (isChecked)
        {
            if (!internalSelectedFunctions.Contains(fn.Name))
                internalSelectedFunctions.Add(fn.Name);
        }
        else
        {
            internalSelectedFunctions.Remove(fn.Name);
        }

        serverSelections[fn.ServerName] = AvailableFunctions
            .Where(f => f.ServerName == fn.ServerName)
            .All(f => internalSelectedFunctions.Contains(f.Name));

        await SelectedFunctionsChanged.InvokeAsync(internalSelectedFunctions.ToList());
    }

    private async Task OnAutoSelectFunctionsChanged(bool value)
    {
        AutoSelectFunctions = value;
        StateHasChanged();
        await AutoSelectFunctionsChanged.InvokeAsync(value);
    }

    private async Task OnAutoSelectCountChanged(int value)
    {
        AutoSelectCount = value;
        StateHasChanged();
        await AutoSelectCountChanged.InvokeAsync(value);
    }
}
