@page "/models"
@using ChatClient.Shared.Models
@using System.Text.Json
@using ChatClient.Api.Client.Services
@inject IModelsService ModelsService

<MudContainer Class="mt-3">
    <MudText Class="page-header">Available Models</MudText>

    @if (_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText Class="ml-2">Loading models...</MudText>
    }
    else if (_models.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No models available. Make sure Ollama is running and has models installed.</MudAlert>
    }
    else
    {
        <MudTable Items="@_models" Hover="true" Striped="true" Dense="true" Class="mb-4" Elevation="2">
            <HeaderContent>
                <MudTh>Model Name</MudTh>
                <MudTh>Modified At</MudTh>
                <MudTh>Size</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Modified At">@FormatDate(context.ModifiedAt)</MudTd>
                <MudTd DataLabel="Size">@FormatSize(context.Size)</MudTd>
            </RowTemplate>
        </MudTable>
    }

    @if (_errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Class="mt-2">@_errorMessage</MudAlert>
    }
</MudContainer>

@code {
    private List<OllamaModel> _models = new();
    private bool _loading = true;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            _models = await ModelsService.GetModelsAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading models: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }

    private string FormatDate(string timestamp)
    {
        if (DateTime.TryParse(timestamp, out var date))
        {
            return date.ToString("g");
        }
        return timestamp;
    }

    private string FormatSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }
}
