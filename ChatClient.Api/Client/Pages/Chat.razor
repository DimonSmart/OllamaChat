@page "/"
@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Collections.ObjectModel
@using System.Text.Json
@using ChatClient.Shared.Models
@using System.Threading
@using System.Text
@using MudBlazor
@using ChatClient.Api.Client.Pages
@using ChatClient.Api.Client.Services
@using ChatClient.Api.Client.Components
@using ChatClient.Api.Client.ViewModels
@using ChatClient.Api.Services

@implements IAsyncDisposable
@inject KernelService KernelService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IChatViewModelService ChatViewModelService
@inject IChatService ChatService
@inject ISystemPromptService PromptService
@inject IUserSettingsService UserSettingsService
@inject OllamaService OllamaService

<PageTitle>Chat with AI Assistant</PageTitle>

<OllamaCheck>
    <div class="chat-container d-flex flex-column">
    @if (isLoadingInitialData)
    {
        <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="mt-2">Loading chat...</MudText>
        </MudOverlay>
    }
    else if (!chatStarted)
    {
        <MudCard Class="ma-auto" Style="max-width: 600px; width: 100%;">
            <MudCardContent>
                @if (systemPrompts.Count == 0)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                    <MudText>Loading system prompts...</MudText>
                }
                else
                {
                    <MudSelect T="SystemPrompt" Label="Select System Prompt" @bind-Value="selectedSystemPrompt" Variant="Variant.Outlined" FullWidth="true" Dense="true">
                        @foreach (var prompt in systemPrompts)
                        {
                            <MudSelectItem Value="@prompt">@prompt.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSwitch T="bool" @bind-value="showPromptContent" Color="Color.Primary" Class="mt-4" Style="margin-bottom: 10px;">View Prompt Content</MudSwitch>
                    @if (showPromptContent)
                    {
                        <div class="prompt-preview mt-3 pa-3 mb-2">
                            @(selectedSystemPrompt?.Content ?? string.Empty)
                        </div>
                    }
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Class="mt-4"
                               Size="Size.Medium"
                               OnClick="StartChat">
                        Start Chat
                    </MudButton>
                    <MudButton Href="/system-prompts"
                               Variant="Variant.Text"
                               Color="Color.Secondary"
                               FullWidth="true"
                               Class="mt-2"
                               Size="Size.Medium">
                        Manage System Prompts
                    </MudButton>
                }
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <div class="chat-messages-container" @ref="messagesElement">
            @foreach (var message in ChatViewModelService.Messages)
            {                
                @if (message.Role != Microsoft.Extensions.AI.ChatRole.System)
                {
                    <MudChat Dense="true" ChatPosition="@(message.Role == Microsoft.Extensions.AI.ChatRole.Assistant ? ChatBubblePosition.Start : ChatBubblePosition.End)" @key="message.Id">
                         <MudChatHeader Time="@message.MsgDateTime.ToString("g")" />

                        @{
                            var displayName = message.Role == Microsoft.Extensions.AI.ChatRole.Assistant 
                                ? GetAgentDisplayName() 
                                : userSettings.UserName;
                            var avatarText = GetAvatarText(displayName);
                        }

                            @if (!string.IsNullOrEmpty(avatarText))
                        {
                            <MudAvatar Color="@(message.Role == Microsoft.Extensions.AI.ChatRole.Assistant ? Color.Primary : Color.Secondary)">
                                @avatarText
                            </MudAvatar>
                        }
                        
                        <MudChatBubble>
                            @if (message.Files.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var file in message.Files)
                                    {
                                        @if (IsImageFile(file.ContentType))
                                        {
                                            <div class="image-thumbnail">
                                                <img src="@GetImageDataUrl(file)" 
                                                     alt="@file.Name" 
                                                     style="max-width: 150px; max-height: 150px; object-fit: cover;"
                                                     @onclick="@(() => ShowFullSizeImage(file))" />
                                                <MudText Typo="Typo.caption" Class="image-caption mt-1 text-center">
                                                    @file.Name (@FormatFileSize(file.Size))
                                                </MudText>
                                            </div>
                                        }
                                        else
                                        {
                                            <MudChip T="string" 
                                                     Color="Color.Info" 
                                                     Size="Size.Small"
                                                     Class="mb-1 mr-1">
                                                <MudIcon Icon="@GetFileIcon(file.ContentType)" Class="mr-1" />
                                                @file.Name (@FormatFileSize(file.Size))
                                            </MudChip>
                                        }
                                    }
                                </div>
                            }
                            @((MarkupString)message.HtmlContent)
                        </MudChatBubble>
                        @if (message.ThinkSegments.Any())
                        {
                            var validThoughts = message.ThinkSegments
                                .Select((segment, index) => new { segment, html = message.HtmlThinkSegments.ElementAt(index) })
                                .Where(x => !string.IsNullOrWhiteSpace(x.segment))
                                .ToList();

                            foreach (var thought in validThoughts)
                            {
                                <ThoughtDisplay PlainText="@thought.segment" HtmlText="@thought.html" />
                            }
                        }

                        @if (message.FunctionCalls.Any())
                        {
                            foreach (var call in message.FunctionCalls)
                            {
                                <McpCallDisplay Call="@call" />
                            }
                        }

                        @if (message.IsStreaming || message.IsCanceled || !string.IsNullOrEmpty(message.Statistics))
                        {
                            <MudChatFooter>
                                @if (message.IsStreaming)
                                {
                                    <MudText Typo="Typo.caption" Class="typing-indicator">typing...</MudText>
                                }
                                @if (message.IsCanceled)
                                {
                                    <MudAlert Severity="Severity.Error" Dense="true" Class="mt-1">
                                        Canceled
                                    </MudAlert>                                }
                                @if (!string.IsNullOrEmpty(message.Statistics))
                                {
                                    <div class="mt-1">
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                            @((MarkupString)message.Statistics)
                                        </MudText>
                                    </div>
                                }
                            </MudChatFooter>
                        }
                    </MudChat>
                }
            }
          </div>
        
        <!-- Fixed input panel at bottom -->
        <div class="chat-input-panel">
            <div class="d-flex flex-row gap-1 align-center">
                <MudSelect T="OllamaModel"
                           Value="selectedModel"
                           ValueChanged="OnModelChanged"
                           Label="Model"
                           Variant="Variant.Filled"
                           Dense="true"
                           Margin="Margin.Dense">
                    @foreach (var model in availableModels)
                    {
                        <MudSelectItem Value="@model">
                                <span>@model.Name</span>
                                @if (model.SupportsImages)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Image" 
                                             Size="Size.Small" 
                                             Class="ml-1" 
                                             title="Supports images"
                                             Style="color: #4caf50;" />
                                }
                                
                                @if (model.SupportsFunctionCalling)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Settings" 
                                             Size="Size.Small" 
                                             Class="ml-1" 
                                             title="Function calling support detected (may not be accurate)"
                                             Style="color: #2196f3;" />
                                }
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="@(() => functionsExpanded = !functionsExpanded)">
                    Functions
                </MudButton>
                <MudCheckBox @bind-Value="useAgentMode" 
                             Label="Agent" 
                             Color="Color.Primary"
                             Size="Size.Small"
                             Dense="true"
                             Class="ml-2" />
            </div>
          
            <FunctionSelector AvailableFunctions="availableFunctions"
                              SelectedFunctions="selectedFunctions"
                              SelectedFunctionsChanged="OnSelectedFunctionsChanged"
                              Expanded="@functionsExpanded" />

            <div class="d-flex flex-column">
                <ChatInput OnSend="SendChatMessageAsync" 
                          ShowStopButton="isLLMAnswering" 
                          OnStopClick="Cancel" />

                @if (!isLLMAnswering)
                {
                    <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="2" Class="mt-1">
                        <MudButton OnClick="RestartChat"
                                   Color="Color.Secondary"
                                   Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Filled.AddCircle"
                                   Size="Size.Small">
                            New Chat
                        </MudButton>
                    </MudStack>
                }
            </div>
        </div>
    }
</div>
</OllamaCheck>

@code {
    private bool isLLMAnswering { get; set; } = false;
    private bool isLoadingInitialData = true;
    private bool chatStarted = false;
    private ElementReference messagesElement;

    private List<SystemPrompt> systemPrompts = new();
    private SystemPrompt? selectedSystemPrompt;
    private List<FunctionInfo> availableFunctions = new();
    private List<string> selectedFunctions = new();
    private bool functionsExpanded = false;
    private bool useAgentMode = false;

    private List<OllamaModel> availableModels = new();
    private OllamaModel? selectedModel;

    private bool showPromptContent { get; set; } = false;


    private UserSettings userSettings = new();

    private readonly EventCallback<ChatMessageViewModel> _messageAddedCallback;
    private readonly EventCallback<ChatMessageViewModel> _messageUpdatedCallback;

    public Chat()
    {
        _messageAddedCallback = EventCallback.Factory.Create<ChatMessageViewModel>(this, OnMessageAdded);        _messageUpdatedCallback = EventCallback.Factory.Create<ChatMessageViewModel>(this, OnMessageUpdated);
    }

    protected override async Task OnInitializedAsync()
    {
        isLoadingInitialData = true;
        StateHasChanged();

        await LoadSystemPrompts();
        await LoadAvailableFunctions();
        await LoadAvailableModels();
        await LoadUserSettings();

        ChatService.LoadingStateChanged += OnLoadingStateChanged;
        ChatViewModelService.MessageAdded += async (msg) => await _messageAddedCallback.InvokeAsync(msg);
        ChatViewModelService.MessageUpdated += async (msg) => await _messageUpdatedCallback.InvokeAsync(msg);

        isLoadingInitialData = false;
        StateHasChanged();
    }

    private void OnLoadingStateChanged(bool loading)
    {
        isLLMAnswering = loading;
        StateHasChanged();
    }

    private async Task OnMessageAdded(ChatMessageViewModel message)
    {
        StateHasChanged();
        await ScrollToBottom();
    }    
    private void OnMessageUpdated(ChatMessageViewModel message)
    {
        StateHasChanged();
    }

    private Task OnSelectedFunctionsChanged(List<string> functions)
    {
        selectedFunctions = functions;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task LoadSystemPrompts()
    {
        systemPrompts = await PromptService.GetAllPromptsAsync();
        if (systemPrompts.Count == 0) 
            systemPrompts.Add(PromptService.GetDefaultSystemPrompt());
        selectedSystemPrompt = systemPrompts.FirstOrDefault();
    }

    private async Task LoadUserSettings()
    {
            userSettings = await UserSettingsService.GetSettingsAsync();
            useAgentMode = userSettings.DefaultUseAgentMode;
    }

    private async Task LoadAvailableFunctions()
    {
        try
        {
            availableFunctions = (await KernelService.GetAvailableFunctionsAsync()).ToList();
        }
        catch (Exception ex)        
        {
            Console.WriteLine($"Error loading available functions: {ex}");
            availableFunctions = new List<FunctionInfo>();
        }
    }

    private async Task LoadAvailableModels()
    {
        try
        {
            availableModels = (await OllamaService.GetModelsAsync()).ToList();
            // Get user settings to find default model
            var settings = await UserSettingsService.GetSettingsAsync();
            if (!string.IsNullOrWhiteSpace(settings.DefaultModelName) && 
                availableModels.Any(m => m.Name == settings.DefaultModelName))
            {
                selectedModel = availableModels.FirstOrDefault(m => m.Name == settings.DefaultModelName);
            }
            else
            {
                selectedModel = availableModels.FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available models: {ex}");
            availableModels = new List<OllamaModel>();
        }
    }

    private void StartChat()
    {
        if (selectedSystemPrompt == null)
        {
            selectedSystemPrompt = PromptService.GetDefaultSystemPrompt();
        }        ChatService.InitializeChat(selectedSystemPrompt);
        chatStarted = true;
        StateHasChanged();
    }
    private void RestartChat()
    {
        chatStarted = false;
        ChatService.ClearChat();
        StateHasChanged();
    }
    private async Task SendChatMessageAsync((string text, IReadOnlyList<ChatMessageFile> files) messageData)
    {
        if (string.IsNullOrWhiteSpace(messageData.text) || isLLMAnswering)
            return;

        var chatConfiguration = new ChatConfiguration(
            selectedModel?.Name ?? string.Empty, 
            selectedFunctions,
            useAgentMode);

        await ChatService.AddUserMessageAndAnswerAsync(messageData.text.Trim(), chatConfiguration, messageData.files);
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesElement);
        }        
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }

    private void Cancel()
    {        ChatService.CancelAsync();
    }

    private void OnModelChanged(OllamaModel model)
    {
        selectedModel = model;
        Console.WriteLine($"Selected model changed to: {model.Name}");
    }    

    public ValueTask DisposeAsync()
    {
        ChatService.LoadingStateChanged -= OnLoadingStateChanged;
        ChatViewModelService.MessageAdded -= async (msg) => await InvokeAsync(() => OnMessageAdded(msg));
        ChatViewModelService.MessageUpdated -= (msg) => InvokeAsync(() => OnMessageUpdated(msg));
        return ValueTask.CompletedTask;
    }

    private string GetFileIcon(string contentType)
    {
        return contentType.ToLower() switch
        {
            var ct when ct.StartsWith("image/") => Icons.Material.Filled.Image,
            var ct when ct.Contains("pdf") => Icons.Material.Filled.PictureAsPdf,
            var ct when ct.Contains("text") => Icons.Material.Filled.Description,
            var ct when ct.Contains("word") || ct.Contains("document") => Icons.Material.Filled.Description,
            _ => Icons.Material.Filled.AttachFile
        };
    }    

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = ["B", "KB", "MB", "GB"];
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }

    private bool IsImageFile(string contentType)
    {
        return contentType.ToLower().StartsWith("image/");
    }

    private string GetImageDataUrl(ChatMessageFile file)
    {
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(file.Data)}";
    }    private async Task ShowFullSizeImage(ChatMessageFile file)
    {
        var parameters = new DialogParameters
        {
            ["ImageFile"] = file
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = true
        };

        await DialogService.ShowAsync<ImageViewerDialog>("Image Viewer", parameters, options);
    }

    private string GetAgentDisplayName() =>
    !string.IsNullOrWhiteSpace(ChatService.CurrentSystemPrompt?.AgentName)
        ? ChatService.CurrentSystemPrompt.AgentName
        : userSettings.AgentName;

    private string GetAvatarText(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return string.Empty;

        return name;
    }
}