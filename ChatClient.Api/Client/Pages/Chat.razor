@page "/"
@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Collections.ObjectModel
@using System.Collections.Generic
@using System.Text.Json
@using ChatClient.Shared.Models
@using ChatClient.Shared.Models.StopAgents
@using System.Threading
@using System.Text
@using System.Linq
@using MudBlazor
@using ChatClient.Api.Client.Services
@using ChatClient.Api.Client.Components
@using ChatClient.Api.Client.ViewModels
@using ChatClient.Api.Services

@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IChatViewModelService ChatViewModelService
@inject IChatService ChatService
@inject IAgentDescriptionService AgentService
@inject IUserSettingsService UserSettingsService
@inject IStopAgentFactory StopAgentFactory

<PageTitle>Chat with AI Assistant</PageTitle>

<OllamaCheck>
    <MudStack Class="chat-container" Direction="Direction.Column">
    @if (isLoadingInitialData)
    {
        <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="mt-2">Loading chat...</MudText>
        </MudOverlay>
    }
    else if (!chatStarted)
    {
        <MudCard Class="ma-auto" Style="max-width: 600px; width: 100%;">
            <MudCardContent>
                @if (agents.Count == 0)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                    <MudText>Loading agents...</MudText>
                }
                else
                {
                    <MudSelect T="AgentDescription" Label="Select Agent" @bind-Value="selectedAgent" Variant="Variant.Outlined" FullWidth="true" Dense="true">
                        @foreach (var agent in agents)
                        {
                            <MudSelectItem Value="@agent">@agent.AgentName</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSwitch T="bool" @bind-value="showAgentDescription" Color="Color.Primary" Class="mt-4" Style="margin-bottom: 10px;">View Agent Description</MudSwitch>
                    @if (showAgentDescription && selectedAgent != null)
                    {
                        <div class="agent-description-preview mt-3 pa-3 mb-2">
                            <div class="mb-2">
                                <strong>@selectedAgent.AgentName</strong>
                                <div>@(selectedAgent.Content ?? string.Empty)</div>
                            </div>
                        </div>
                    }
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Class="mt-4"
                               Size="Size.Medium"
                               OnClick="StartChat">
                        Start Chat
                    </MudButton>
                    <MudButton Href="/agent-descriptions"
                               Variant="Variant.Text"
                               Color="Color.Secondary"
                               FullWidth="true"
                               Class="mt-2"
                               Size="Size.Medium">
                        Manage Agent Descriptions
                    </MudButton>
                }
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <div class="chat-messages-container" @ref="messagesElement">
            @foreach (var message in ChatViewModelService.Messages)
            {                
                @if (message.Role != Microsoft.Extensions.AI.ChatRole.System)
                {
                    <MudChat Dense="true" ChatPosition="@(message.Role == Microsoft.Extensions.AI.ChatRole.Assistant ? ChatBubblePosition.Start : ChatBubblePosition.End)" @key="message.Id">
                         <MudChatHeader>
                             <time>@message.MsgDateTime.ToString("g")</time>
                             @if (!isLLMAnswering)
                             {
                                <span class="copy-button" title="Copy answer" @onclick="(() => CopyVisibleMessage(message))">ðŸ“‹</span>
                                <span class="copy-button" title="Copy raw" @onclick="(() => CopyRawMessage(message))">ðŸšª</span>
                                <span class="delete-button" title="Delete" @onclick="(() => DeleteMessage(message))">ðŸ—‘</span>
                             }
                         </MudChatHeader>

                        @{
                            var displayName = message.Role == Microsoft.Extensions.AI.ChatRole.Assistant
                                ? (message.AgentName ?? string.Empty)
                                : userSettings.UserName;
                            var avatarText = GetAvatarText(displayName);
                        }

                            @if (!string.IsNullOrEmpty(avatarText))
                        {
                            <MudAvatar Color="@(message.Role == Microsoft.Extensions.AI.ChatRole.Assistant ? Color.Primary : Color.Secondary)">
                                @avatarText
                            </MudAvatar>
                        }
                        
                        <MudChatBubble>
                            @if (message.Files.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var file in message.Files)
                                    {
                                        @if (IsImageFile(file.ContentType))
                                        {
                                            <div class="image-thumbnail">
                                                <img src="@GetImageDataUrl(file)" 
                                                     alt="@file.Name" 
                                                     style="max-width: 150px; max-height: 150px; object-fit: cover;"
                                                     @onclick="@(() => ShowFullSizeImage(file))" />
                                                <MudText Typo="Typo.caption" Class="image-caption mt-1 text-center">
                                                    @file.Name (@FormatFileSize(file.Size))
                                                </MudText>
                                            </div>
                                        }
                                        else
                                        {
                                            <MudChip T="string" 
                                                     Color="Color.Info" 
                                                     Size="Size.Small"
                                                     Class="mb-1 mr-1">
                                                <MudIcon Icon="@GetFileIcon(file.ContentType)" Class="mr-1" />
                                                @file.Name (@FormatFileSize(file.Size))
                                            </MudChip>
                                        }
                                    }
                                </div>
                            }
                            @((MarkupString)message.HtmlContent)
                        </MudChatBubble>
                        @if (message.ThinkSegments.Any())
                        {
                            var validThoughts = message.ThinkSegments
                                .Select((segment, index) => new { segment, html = message.HtmlThinkSegments.ElementAt(index) })
                                .Where(x => !string.IsNullOrWhiteSpace(x.segment))
                                .ToList();

                            foreach (var thought in validThoughts)
                            {
                                <ThoughtDisplay PlainText="@thought.segment" HtmlText="@thought.html" />
                            }
                        }

                        @if (message.FunctionCalls.Any())
                        {
                            foreach (var call in message.FunctionCalls)
                            {
                                <McpCallDisplay Call="@call" />
                            }
                        }

                        @if (message.IsStreaming || message.IsCanceled || !string.IsNullOrEmpty(message.Statistics))
                        {
                            <MudChatFooter>
                                @if (message.IsStreaming)
                                {
                                    <MudText Typo="Typo.caption" Class="typing-indicator">typing...</MudText>
                                }
                                @if (message.IsCanceled)
                                {
                                    <MudAlert Severity="Severity.Error" Dense="true" Class="mt-1">
                                        Canceled
                                    </MudAlert>                                }
                                @if (!string.IsNullOrEmpty(message.Statistics))
                                {
                                    <div class="mt-1">
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                            @((MarkupString)message.Statistics)
                                        </MudText>
                                    </div>
                                }
                            </MudChatFooter>
                        }
                    </MudChat>
                }
            }
          </div>
        
        <!-- Fixed input panel at bottom -->
        <div class="chat-input-panel">
            <MudStack Direction="Direction.Column">
                <ChatInput OnSend="SendChatMessageAsync"
                          ShowStopButton="isLLMAnswering"
                          OnStopClick="Cancel" />
            </MudStack>
        </div>
    }
</MudStack>
</OllamaCheck>

@code {
    private const int UpdateIntervalMs = 500;

    private bool isLLMAnswering { get; set; } = false;
    private bool isLoadingInitialData = true;
    private bool chatStarted = false;
    private ElementReference messagesElement;

    private List<AgentDescription> agents = new();
    private AgentDescription? selectedAgent { get; set; }

    [CascadingParameter(Name = "SelectedModel")]
    public OllamaModel? SelectedModel { get; set; }

    private bool showAgentDescription { get; set; } = false;


    private UserSettings userSettings = new();

    private StreamingDebouncer _renderDebouncer = null!;

    private Func<ChatMessageViewModel, Task>? _messageAddedHandler;
    private Func<ChatMessageViewModel, bool, Task>? _messageUpdatedHandler;
    private Func<ChatMessageViewModel, Task>? _messageDeletedHandler;

    protected override async Task OnInitializedAsync()
    {
        isLoadingInitialData = true;
        StateHasChanged();

        await LoadAgents();
        await LoadUserSettings();

        ChatService.AnsweringStateChanged += OnAnsweringStateChanged;
        ChatViewModelService.ChatReset += OnChatReset;
        _renderDebouncer = new StreamingDebouncer(UpdateIntervalMs, () => InvokeAsync(StateHasChanged));
        _messageAddedHandler = msg => InvokeAsync(() => OnMessageAdded(msg));
        _messageUpdatedHandler = (msg, force) => InvokeAsync(() => OnMessageUpdated(msg, force));
        _messageDeletedHandler = msg => InvokeAsync(() => OnMessageDeleted(msg));
        ChatViewModelService.MessageAdded += _messageAddedHandler;
        ChatViewModelService.MessageUpdated += _messageUpdatedHandler;
        ChatViewModelService.MessageDeleted += _messageDeletedHandler;

        isLoadingInitialData = false;
        StateHasChanged();
    }

    private void OnAnsweringStateChanged(bool answering)
    {
        isLLMAnswering = answering;
        StateHasChanged();
    }

    private async Task OnMessageAdded(ChatMessageViewModel message)
    {
        StateHasChanged();
        await ScrollToBottom();
    }    
    private Task OnMessageUpdated(ChatMessageViewModel message, bool forceRender)
    {
        return _renderDebouncer.TriggerAsync(forceRender);
    }

    private void OnMessageDeleted(ChatMessageViewModel message)
    {
        StateHasChanged();
    }

    private void OnChatReset()
    {
        chatStarted = true;
        StateHasChanged();
    }


    private async Task LoadAgents()
    {
        agents = await AgentService.GetAllAsync();
        if (agents.Count == 0)
            agents.Add(AgentService.GetDefaultAgentDescription());
        selectedAgent = null;
    }

    private async Task LoadUserSettings()
    {
        userSettings = await UserSettingsService.GetSettingsAsync();
    }

    private void StartChat()
    {
        var agents = selectedAgent != null ? new[] { selectedAgent } : Array.Empty<AgentDescription>();
        if (agents.Length != 1)
        {
            throw new InvalidOperationException("Single-agent chat requires exactly one agent.");
        }

        ChatService.InitializeChat(agents);
        chatStarted = true;
        StateHasChanged();
    }

    private async Task SendChatMessageAsync((string text, IReadOnlyList<ChatMessageFile> files) messageData)
    {
        if (string.IsNullOrWhiteSpace(messageData.text) || isLLMAnswering) return;
        if (selectedAgent == null) return;

        var functions = selectedAgent.FunctionSettings.SelectedFunctions ?? [];
        var chatConfiguration = new ChatConfiguration(SelectedModel?.Name, functions);
        var options = new RoundRobinStopAgentOptions { Rounds = 1 };
        var groupChatManager = StopAgentFactory.Create("RoundRobin", options);
        await ChatService.GenerateAnswerAsync(messageData.text.Trim(), chatConfiguration, groupChatManager, messageData.files);
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesElement);
        }        
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }

    private void Cancel()
    {        ChatService.CancelAsync();
    }

    private async Task DeleteMessage(ChatMessageViewModel message)
    {
        if (isLLMAnswering)
            return;

        await ChatService.DeleteMessageAsync(message.Id);
    }

    private async Task CopyVisibleMessage(ChatMessageViewModel message)
    {
        await JSRuntime.InvokeVoidAsync("copyText", message.Content);
    }

    private async Task CopyRawMessage(ChatMessageViewModel message)
    {
        if (!string.IsNullOrEmpty(message.RawContent))
        {
            await JSRuntime.InvokeVoidAsync("copyText", message.RawContent);
        }
    }

    public ValueTask DisposeAsync()
    {
        ChatService.AnsweringStateChanged -= OnAnsweringStateChanged;
        ChatViewModelService.ChatReset -= OnChatReset;
        if (_messageAddedHandler != null)
            ChatViewModelService.MessageAdded -= _messageAddedHandler;
        if (_messageUpdatedHandler != null)
            ChatViewModelService.MessageUpdated -= _messageUpdatedHandler;
        if (_messageDeletedHandler != null)
            ChatViewModelService.MessageDeleted -= _messageDeletedHandler;
        return ValueTask.CompletedTask;
    }

    private string GetFileIcon(string contentType)
    {
        return contentType.ToLower() switch
        {
            var ct when ct.StartsWith("image/") => Icons.Material.Filled.Image,
            var ct when ct.Contains("pdf") => Icons.Material.Filled.PictureAsPdf,
            var ct when ct.Contains("text") => Icons.Material.Filled.Description,
            var ct when ct.Contains("word") || ct.Contains("document") => Icons.Material.Filled.Description,
            _ => Icons.Material.Filled.AttachFile
        };
    }    

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = ["B", "KB", "MB", "GB"];
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }

    private bool IsImageFile(string contentType)
    {
        return contentType.ToLower().StartsWith("image/");
    }

    private string GetImageDataUrl(ChatMessageFile file)
    {
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(file.Data)}";
    }    private async Task ShowFullSizeImage(ChatMessageFile file)
    {
        var parameters = new DialogParameters
        {
            ["ImageFile"] = file
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = true
        };

        await DialogService.ShowAsync<ImageViewerDialog>("Image Viewer", parameters, options);
    }

    private string GetAvatarText(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return string.Empty;

        return name;
    }
}