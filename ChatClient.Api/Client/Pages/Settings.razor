@page "/settings"
@using ChatClient.Api.Client.Services
@using ChatClient.Api.Services
@using ChatClient.Shared.Models
@using ChatClient.Shared.Services
@using System.Text.Json
@inject IUserSettingsService UserSettingsService
@inject OllamaService OllamaService
@inject ISnackbar Snackbar

<PageTitle>User Settings</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
    <MudText Class="page-header">User Settings</MudText>

    @if (_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText Class="ml-2">Loading settings...</MudText>
    }
    else
    {
        <MudPaper Elevation="3" Class="pa-3 rounded-lg">
            <MudForm @ref="_form" Model="@_settings">
                <MudCard Class="mb-4" Elevation="1">
                    <MudCardHeader Class="pb-2">
                        <MudText Class="section-header">Default Model</MudText>
                    </MudCardHeader>
                    <MudCardContent Class="pt-0">
                        <MudSelect T="string" Label="Default Model" @bind-Value="_settings.DefaultModelName"
                                   Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Dense="true">
                            @foreach (var model in _availableModels)
                            {
                                <MudSelectItem Value="@model.Name">@model.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudText Typo="Typo.caption" Class="mt-2">
                            This model will be selected by default when starting a new chat.
                        </MudText>
                    </MudCardContent>
                </MudCard>
                <MudCard Class="mb-4" Elevation="1">
                    <MudCardHeader Class="pb-2">
                        <MudText Class="section-header">Default Chat Message</MudText>
                    </MudCardHeader>
                    <MudCardContent Class="pt-0">
                        <MudTextField T="string" Label="Default Chat Message" @bind-Value="_settings.DefaultChatMessage"
                                      Lines="3" Variant="Variant.Outlined" HelperText="Pre-filled message in the chat input (useful for testing)" />
                    </MudCardContent>
                </MudCard>
                <MudCard Class="mb-4" Elevation="1">
                    <MudCardHeader Class="pb-2">
                        <MudText Class="section-header">Ollama Server Settings</MudText>
                    </MudCardHeader>
                    <MudCardContent Class="pt-0">
                        <MudTextField T="string" Label="Server URL" @bind-Value="_settings.OllamaServerUrl"
                                      Variant="Variant.Outlined"
                                      HelperText="Ollama server URL including protocol and port (e.g., https://my-server:11434)"
                                      Placeholder="http://localhost:11434" />
                        <MudTextField T="string" Label="Basic Auth Password" @bind-Value="_settings.OllamaBasicAuthPassword"
                                      Variant="Variant.Outlined" InputType="InputType.Password"
                                      HelperText="Password for basic authentication (leave empty if not required)"
                                      Class="mt-3" />
                        <MudSwitch T="bool" @bind-Value="_settings.IgnoreSslErrors" Color="Color.Primary" Class="mt-3">
                            Ignore SSL certificate errors (for self-signed certificates)
                        </MudSwitch>
                        <MudAlert Severity="Severity.Warning" Class="mt-3" Visible="@_settings.IgnoreSslErrors">
                            <MudText Typo="Typo.body2">
                                Warning: Ignoring SSL certificate errors reduces security. Only enable this for trusted servers with self-signed certificates.
                            </MudText>
                        </MudAlert>
                    </MudCardContent>
                </MudCard>
                <MudCard Class="mb-4" Elevation="1">
                    <MudCardHeader Class="pb-2">
                        <MudText Class="section-header">Statistics Settings</MudText>
                    </MudCardHeader>
                    <MudCardContent Class="pt-0">
                        <MudSwitch T="bool" @bind-Value="_settings.ShowTokensPerSecond" Color="Color.Primary">
                            Show tokens per second in statistics
                        </MudSwitch>
                    </MudCardContent>
                </MudCard>
                <MudButtonGroup Class="mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveSettings" Size="Size.Medium">Save Settings</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ResetSettings" Size="Size.Medium">Reset</MudButton>
                </MudButtonGroup>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {
    private UserSettings _settings = new();
    private List<OllamaModel> _availableModels = new();
    private bool _loading = true;
    private MudForm? _form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            await LoadModels();
            await LoadSettings();
        }
        finally
        {
            _loading = false;
        }
    }    
    
    private async Task LoadModels()
    {
        try
        {
            _availableModels = (await OllamaService.GetModelsAsync()).ToList();
            if (_availableModels.Count == 0)
            {
                Snackbar.Add("No models available. Settings will be saved but model selection won't take effect.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading models: {ex.Message}");
            Snackbar.Add("Failed to load available models.", Severity.Error);
        }
    }

    private async Task LoadSettings()
    {
        try
        {
            _settings = await UserSettingsService.GetSettingsAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading settings: {ex.Message}");
            Snackbar.Add("Failed to load settings.", Severity.Error);
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            await UserSettingsService.SaveSettingsAsync(_settings);
            Snackbar.Add("Settings saved successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving settings: {ex.Message}");
            Snackbar.Add($"Failed to save settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task ResetSettings()
    {
        await LoadSettings();
        Snackbar.Add("Settings reset to last saved values", Severity.Info);
    }
}
