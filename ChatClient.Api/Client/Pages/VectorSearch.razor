@page "/vector-search"
@using ChatClient.Api.Services
@using ChatClient.Shared.Services
@using System.Linq

<PageTitle>Vector Search</PageTitle>

<OllamaCheck>
    <MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
        <MudStack Spacing="2">
            <MudSelect T="AgentDescription"
                       Label="Select Agent"
                       Value="selectedAgent"
                       ValueChanged="AgentChanged"
                       Variant="Variant.Outlined"
                       Dense="true"
                       FullWidth="true">
                @foreach (var agent in agents)
                {
                    <MudSelectItem Value="@agent">@agent.AgentName</MudSelectItem>
                }
            </MudSelect>

            @if (selectedAgent is not null)
            {
                <MudText Typo="Typo.body2">Files: @fileCount, size: @FormatSize(totalSize)</MudText>
            }

            <ChatInput OnSend="SearchAsync" />

            @if (totalResults > 0)
            {
                <MudText Typo="Typo.body2" Class="mt-2">Found @totalResults segments, showing @results.Count.</MudText>
            }

            @if (results.Count > 0)
            {
                <MudList T="RagSearchResult" Dense="true" Class="mt-4">
                    @foreach (var item in results)
                    {
                        <MudListItem T="RagSearchResult">
                            <MudText Typo="Typo.subtitle2">@item.FileName</MudText>
                            <MudText Typo="Typo.body2">@item.Content</MudText>
                            <MudText Typo="Typo.caption">Score: @item.Score.ToString("0.###")</MudText>
                        </MudListItem>
                    }
                </MudList>
            }
        </MudStack>
    </MudContainer>
</OllamaCheck>

@code {
    private List<AgentDescription> agents = [];
    private AgentDescription? selectedAgent;
    private List<RagSearchResult> results = [];
    private int totalResults;
    private int fileCount;
    private long totalSize;
    private string embeddingModel = string.Empty;

    [Inject] private IAgentDescriptionService AgentService { get; set; } = default!;
    [Inject] private IOllamaClientService OllamaService { get; set; } = default!;
    [Inject] private IRagVectorSearchService VectorSearchService { get; set; } = default!;
    [Inject] private IRagFileService RagFileService { get; set; } = default!;
    [Inject] private IUserSettingsService UserSettingsService { get; set; } = default!;
    [Inject] private IConfiguration Configuration { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        agents = await AgentService.GetAllAsync();
        var settings = await UserSettingsService.GetSettingsAsync();
        embeddingModel = string.IsNullOrWhiteSpace(settings.EmbeddingModelName)
            ? Configuration["Ollama:EmbeddingModel"] ?? "nomic-embed-text"
            : settings.EmbeddingModelName;
    }

    private async Task AgentChanged(AgentDescription? agent)
    {
        selectedAgent = agent;
        results.Clear();
        totalResults = 0;
        fileCount = 0;
        totalSize = 0;
        if (selectedAgent is null) return;
        var files = await RagFileService.GetFilesAsync(selectedAgent.Id);
        fileCount = files.Count;
        totalSize = files.Sum(f => f.Size);
    }

    private async Task SearchAsync((string text, IReadOnlyList<AppChatMessageFile> _) data)
    {
        if (selectedAgent is null) return;
        var text = data.text.Trim();
        if (string.IsNullOrWhiteSpace(text)) return;

        var embedding = await OllamaService.GenerateEmbeddingAsync(text, embeddingModel);
        var response = await VectorSearchService.SearchAsync(selectedAgent.Id, new ReadOnlyMemory<float>(embedding));
        results = response.Results.ToList();
        totalResults = response.Total;
    }

    private static string FormatSize(long bytes)
    {
        var sizes = new[] { "B", "KB", "MB", "GB" };
        double len = bytes;
        var order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.#} {sizes[order]}";
    }
}
