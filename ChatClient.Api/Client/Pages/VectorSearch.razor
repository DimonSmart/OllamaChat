@page "/vector-search"
@using ChatClient.Api.Services
@using ChatClient.Application.Services
@using ChatClient.Domain.Models
@using ChatClient.Application.Helpers
@using System.Linq
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject ILogger<VectorSearch> Logger
@implements IDisposable

<PageTitle>Vector Search</PageTitle>

<OllamaCheck>
    <MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
        <MudStack Spacing="2">
            <MudSelect T="AgentDescription"
                       Label="Select Agent"
                       Value="@selectedAgent"
                       ValueChanged="AgentChanged"
                       Variant="Variant.Outlined"
                       Dense="true"
                       FullWidth="true">
                @foreach (var agent in agents)
                {
                    <MudSelectItem Value="@agent">@agent.AgentName</MudSelectItem>
                }
            </MudSelect>

            <ChatInput OnSend="SearchAsync" />

            @if (results.Count > 0)
            {
                <MudText Typo="Typo.body2" Class="mt-2">Found @totalResults segments, showing @results.Count.</MudText>
                <MudStack Spacing="1" Class="mt-4">
                    @foreach (var item in results)
                    {
                        <MudPaper Class="pa-2" Style="user-select:text;">
                            <div style="display:flex;justify-content:space-between;">
                                <MudText Typo="Typo.subtitle2">@item.FileName</MudText>
                                <span class="copy-button" title="Copy" @onclick="() => CopyResult(item)">ðŸ“‹</span>
                            </div>
                            <MudText Typo="Typo.body2">@item.Content</MudText>
                            <MudText Typo="Typo.caption">Score: @item.Score.ToString("0.###")</MudText>
                        </MudPaper>
                    }
                </MudStack>
            }
            <MudText Typo="Typo.body2" Class="mt-2">
                Total files: @allFileCount (@allIndexedFiles indexed, @(allFileCount - allIndexedFiles) pending), size: @FormatSize(allTotalSize)
            </MudText>
            @if (selectedAgent is not null)
            {
                <MudText Typo="Typo.body2">@selectedAgent.AgentName: @fileCount files (@indexedFiles indexed), size: @FormatSize(totalSize)</MudText>
            }
            @if (indexStatus is not null)
            {
                var percent = indexStatus.Total == 0 ? 0 : indexStatus.Processed * 100 / indexStatus.Total;
                <MudText Typo="Typo.body2">Indexing @indexStatus.FileName: @percent%</MudText>
            }
        </MudStack>
    </MudContainer>
</OllamaCheck>

@code {
    private List<AgentDescription> agents = [];
    private AgentDescription? selectedAgent;
    private List<RagSearchResult> results = [];
    private int totalResults;
    private int fileCount;
    private int indexedFiles;
    private long totalSize;
    private int allFileCount;
    private int allIndexedFiles;
    private long allTotalSize;
    private ServerModel embeddingModel = new(Guid.Empty, string.Empty);
    private RagVectorIndexStatus? indexStatus;
    private System.Timers.Timer? statusTimer;

    [Inject] private IAgentDescriptionService AgentService { get; set; } = default!;
    [Inject] private IOllamaClientService OllamaService { get; set; } = default!;
    [Inject] private IRagVectorSearchService VectorSearchService { get; set; } = default!;
    [Inject] private IRagFileService RagFileService { get; set; } = default!;
    [Inject] private IUserSettingsService UserSettingsService { get; set; } = default!;
    [Inject] private IConfiguration Configuration { get; set; } = default!;
    [Inject] private IRagVectorIndexBackgroundService IndexBackgroundService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        agents = (await AgentService.GetAllAsync()).ToList();
        foreach (var agent in agents)
        {
            var files = await RagFileService.GetFilesAsync(agent.Id);
            allFileCount += files.Count;
            allIndexedFiles += files.Count(f => f.HasIndex);
            allTotalSize += files.Sum(f => f.Size);
        }
        var settings = await UserSettingsService.GetSettingsAsync();
        embeddingModel = ModelSelectionHelper.GetEffectiveEmbeddingModel(
            settings.Embedding.Model,
            settings.DefaultModel,
            "Vector search UI",
            Logger);
        statusTimer = new(1000);
        statusTimer.Elapsed += (_, _) =>
        {
            indexStatus = IndexBackgroundService.GetCurrentStatus();
            InvokeAsync(StateHasChanged);
        };
        statusTimer.Start();
    }

    private async Task AgentChanged(AgentDescription? agent)
    {
        selectedAgent = agent;
        results.Clear();
        totalResults = 0;
        fileCount = 0;
        totalSize = 0;
        if (selectedAgent is null) return;
        var files = await RagFileService.GetFilesAsync(selectedAgent.Id);
        fileCount = files.Count;
        totalSize = files.Sum(f => f.Size);
        indexedFiles = files.Count(f => f.HasIndex);
        indexStatus = IndexBackgroundService.GetCurrentStatus();
        StateHasChanged();
    }

    private async Task SearchAsync((string text, IReadOnlyList<AppChatMessageFile> _) data)
    {
        if (selectedAgent is null) return;
        var text = data.text.Trim();
        if (string.IsNullOrWhiteSpace(text)) return;

        try
        {
            var model = embeddingModel;
            var embedding = await OllamaService.GenerateEmbeddingAsync(text, model);
            var response = await VectorSearchService.SearchAsync(selectedAgent.Id, new ReadOnlyMemory<float>(embedding));
            results = response.Results.ToList();
            totalResults = response.Total;
        }
        catch (Exception ex) when (!OllamaService.EmbeddingsAvailable)
        {
            Console.Error.WriteLine($"Embedding error: {ex.Message}");
            Snackbar.Add("Embedding service unavailable. Restart the application.", Severity.Error);
        }
    }

    private async Task CopyResult(RagSearchResult item)
    {
        var text = $"{item.FileName}\n{item.Content}\nScore: {item.Score:0.###}";
        await JSRuntime.InvokeVoidAsync("copyText", text);
    }

    private static string FormatSize(long bytes)
    {
        var sizes = new[] { "B", "KB", "MB", "GB" };
        double len = bytes;
        var order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.#} {sizes[order]}";
    }
    public void Dispose()
    {
        statusTimer?.Dispose();
    }
}
