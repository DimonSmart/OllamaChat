@page "/agent-descriptions"
@using System
@using System.IO
@using System.Linq
@using ChatClient.Shared.Models
@using ChatClient.Shared.Services
@using ChatClient.Api.Services
@using ChatClient.Api.Client.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@inject IAgentDescriptionService AgentService
@inject ISnackbar Snackbar
@inject KernelService KernelService
@inject IRagFileService RagFileService
@inject IFileConverter FileConverter
@inject ILlmServerConfigService LlmServerConfigService

<PageTitle>Agent Descriptions Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudText Class="page-header">Agent Descriptions</MudText>

    <MudPaper Elevation="3" Class="pa-3 rounded-lg">
        <MudToolBar Dense="true">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddNewAgent"
                       Class="px-4"
                       Size="Size.Small">
                Add Agent Description
            </MudButton>
            <MudSpacer />
            <MudTextField T="string"
                          ValueChanged="@(s => OnSearch(s))"
                          Placeholder="Search agent descriptions..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0"
                          Style="min-width: 300px;"
                          Immediate="true"
                          DebounceInterval="300" />
        </MudToolBar>

        @if (loading)
        {
            <MudStack Justify="Justify.Center" Class="my-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudStack>
        }
        else
        {
            <MudDataGrid T="AgentDescription" @ref="dataGrid"
                         Items="@filteredAgents"
                         ReadOnly="true"
                         Bordered="true"
                         Hover="true"
                         Striped="true"
                         Dense="true"
                         FixedHeader="true"
                         Height="100%"
                         Class="mt-4">
                <Columns>
                    <PropertyColumn Property="x => x.AgentName" Title="Name" SortBy="x => x.AgentName" />
                    <TemplateColumn Title="Short Name" isEditable="false">
                        <CellTemplate>
                            <div>
                                @if (!string.IsNullOrWhiteSpace(context.Item.ShortName))
                                {
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                                        @context.Item.ShortName
                                    </MudChip>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">Default</MudText>
                                }
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Model" isEditable="false">
                        <CellTemplate>
                            <div>
                                @{ var modelDisplay = GetModelDisplay(context.Item); }
                                @if (!string.IsNullOrWhiteSpace(modelDisplay))
                                {
                                    <MudChip T="string" Color="Color.Secondary" Size="Size.Small">
                                        @modelDisplay
                                    </MudChip>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">Default</MudText>
                                }
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="RAG Files" isEditable="false" CellStyle="text-align:center; width:80px;">
                        <CellTemplate>
                            @(ragCounts.TryGetValue(context.Item.Id, out var count) ? count : 0)
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Functions" isEditable="false" CellStyle="text-align:center; width:80px;">
                        <CellTemplate>
                            @{
                                var functionSettings = GetFunctionSettings(context.Item);
                                var displayText = functionSettings.GetDisplayText();
                                var tooltipText = functionSettings.GetTooltipText();
                                var isAutoSelect = functionSettings.IsAutoSelectEnabled;
                                var hasManualFunctions = functionSettings.HasManualFunctions;
                            }
                            @if (isAutoSelect)
                            {
                                <span title="@tooltipText">@displayText</span>
                            }
                            else if (hasManualFunctions)
                            {
                                <span style="color: #4caf50; font-size: 18px; font-weight: bold;" title="@tooltipText">@displayText</span>
                            }
                            else
                            {
                                <span style="color: #9e9e9e; font-size: 18px;" title="@tooltipText">@displayText</span>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.UpdatedAt" Title="Updated" Format="g" />
                    <PropertyColumn Property="x => x.CreatedAt" Title="Created" Format="g" />
                    <TemplateColumn Title="Content" isEditable="false">
                        <CellTemplate>
                            <div>
                                <MudText Typo="Typo.body2" Class="mud-text-truncate">
                                    @context.Item.Content?.Substring(0, Math.Min(50, context.Item.Content?.Length ?? 0))@(context.Item.Content?.Length > 50 ? "..." : "")
                                </MudText>
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellStyle="display:flex; justify-content:flex-end;">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           OnClick="@(async () => await StartEditingAgent(context.Item))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="() => ConfirmDeleteAgent(context.Item)" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="AgentDescription" PageSizeOptions="new[] { 10, 25, 50, 100 }" />
                </PagerContent>
                <NoRecordsContent>
                    <MudPaper Elevation="0">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="py-8">
                            <MudIcon Icon="@Icons.Material.Filled.FormatQuote" Color="Color.Secondary" Size="Size.Large" />
                            <MudText Typo="Typo.h6" Class="mt-4">No agent descriptions found</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Click "Add Agent Description" to create one.</MudText>
                        </MudStack>
                    </MudPaper>
                </NoRecordsContent>
                <LoadingContent>
                    <MudPaper Elevation="0">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="pa-8">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
                            <MudText Typo="Typo.body1" Class="ml-4">Loading agent descriptions...</MudText>
                        </MudStack>
                    </MudPaper>
                </LoadingContent>
            </MudDataGrid>
        }
    </MudPaper>
</MudContainer>

<MudDialog @bind-Visible="@showDeleteDialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Confirm Delete</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the agent description "@agentToDelete?.AgentName"?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelDelete" Size="Size.Medium">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="DeleteAgent" Size="Size.Medium">Delete</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="@showEditAgentDialog" Options="editDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(editingAgent?.Id == Guid.Empty ? "Create New Agent Description" : "Edit Agent Description")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="editAgentForm" Model="@editingAgent">
            <MudTextField @bind-Value="editingAgent.AgentName"
                          Label="Agent Name"
                          Required="true"
                          Immediate="true"
                          Validation="@(new Func<string, string>(ValidateName))" />

            <MudTextField @bind-Value="editingAgent.ShortName"
                          Label="Short Name (Optional)"
                          Class="mt-4"
                          Immediate="true"
                          HelperText="Custom short name for this agent. If empty, uses global agent name from settings."
                          Placeholder="Enter short name..." />

            <ServerModelPicker @bind-Value="editingServerModel" ShowClearButton="true" UseDefaultsWhenUnset="false" Class="mt-4" />
            <MudText Typo="Typo.caption">Leave blank to use chat's default model.</MudText>

            <MudNumericField T="double?" @bind-Value="editingAgent.Temperature" Label="Temperature (Optional)" Class="mt-4" Immediate="true" Min="0" Max="2" Step="0.1" />

            <MudNumericField T="double?" @bind-Value="editingAgent.RepeatPenalty" Label="Repeat Penalty (Optional)" Class="mt-4" Immediate="true" Min="0" Max="2" Step="0.1" />
            <MudText Typo="Typo.caption">Leave blank to use chat defaults.</MudText>

            <div class="mt-4">
                <FunctionSettingsSelector AvailableFunctions="@availableFunctions"
                                          FunctionSettings="@editingAgent.FunctionSettings"
                                          FunctionSettingsChanged="@OnFunctionSettingsChanged"
                                          Expanded="true"
                                          ExpandedChanged="@(v => functionsExpanded = v)" />
            </div>

            <MudTextField @bind-Value="editingAgent.Content"
                          Label="Agent Description"
                          Lines="10"
                          Class="mt-4"
                          Required="true"
                          Immediate="true"
                          Validation="@(new Func<string, string>(ValidateContent))"
                          Placeholder="Enter agent description here..." />

            @if (editingAgent.Id != Guid.Empty)
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.subtitle1" Class="mb-2">RAG Files</MudText>
                <div class="rag-drop-wrapper mt-2">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                   OnFilesChanged="UploadFiles"
                                   Hidden="false"
                                   InputClass="rag-drop-input" />
                    <div class="rag-drop-overlay">
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Drag and drop files here or click to browse</MudText>
                    </div>
                </div>
                <MudTable Items="@ragFiles" Dense="true" Bordered="true" Class="mt-2">
                    <HeaderContent>
                        <MudTh>File</MudTh>
                        <MudTh>Size</MudTh>
                        <MudTh>Index</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="File">@context.FileName</MudTd>
                        <MudTd DataLabel="Size">@FormatSize(context.Size)</MudTd>
                        <MudTd DataLabel="Index">
                            <MudIcon Icon="@(context.HasIndex ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)"
                                     Color="@(context.HasIndex ? Color.Success : Color.Error)" />
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="@(() => DeleteFile(context.FileName))" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary pa-2">No files</MudText>
                    </NoRecordsContent>
                </MudTable>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelEdit" Size="Size.Medium">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveAgent" Size="Size.Medium">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<AgentDescription> agents = new();
    private List<AgentDescription> filteredAgents = new();
    private bool loading = true;
    private AgentDescription? agentToDelete;
    private AgentDescription editingAgent = new();
    private bool showDeleteDialog { get; set; }
    private bool showEditAgentDialog { get; set; }
    private string searchString = string.Empty;
    private MudForm? editAgentForm;
    private MudDataGrid<AgentDescription>? dataGrid;
    private List<FunctionInfo> availableFunctions = new();
    private bool functionsExpanded;
    private Dictionary<Guid, int> ragCounts = new();
    private List<RagFile> ragFiles = new();
    private ServerModelSelection editingServerModel = new(null, null);
    private List<LlmServerConfig> servers = new();
    private DialogOptions dialogOptions = new()
    {
        CloseOnEscapeKey = true,
        CloseButton = true,
        MaxWidth = MaxWidth.ExtraSmall
    };

    private DialogOptions editDialogOptions = new()
    {
        CloseOnEscapeKey = true,
        CloseButton = true,
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
        servers = await LlmServerConfigService.GetAllAsync();
        await LoadAvailableFunctions();
    }

    private async Task LoadAgents()
    {
        try
        {
            loading = true;
            StateHasChanged();

            agents = await AgentService.GetAllAsync() ?? new();
            filteredAgents = agents;

            ragCounts.Clear();
            var tasks = agents.Select(async a =>
            {
                var files = await RagFileService.GetFilesAsync(a.Id);
                ragCounts[a.Id] = files.Count;
            });
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading agents: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableFunctions()
    {
        try
        {
            availableFunctions = (await KernelService.GetAvailableFunctionsAsync(CancellationToken.None)).ToList();
        }
        catch (Exception)
        {
            availableFunctions = new();
        }
    }

    private string GetModelDisplay(AgentDescription agent)
    {
        if (string.IsNullOrWhiteSpace(agent.ModelName))
            return string.Empty;
        var server = servers.FirstOrDefault(s => s.Id == (agent.LlmId ?? Guid.Empty));
        return server is null || server.Id == Guid.Empty
            ? agent.ModelName
            : $"{server.Name}/{agent.ModelName}";
    }

    private void AddNewAgent()
    {
        editingAgent = new AgentDescription
        {
            Id = Guid.Empty,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
            AgentName = "",
            Content = "",
            ShortName = null,
            ModelName = null,
            LlmId = null,
            Temperature = null,
            RepeatPenalty = null,
            FunctionSettings = new FunctionSettings
            {
                AutoSelectCount = 0,
                SelectedFunctions = []
            }
        };
        editingServerModel = new ServerModelSelection(null, null);
        ragFiles = new();
        showEditAgentDialog = true;
    }

    private void OnSearch(string text)
    {
        searchString = text;
        ApplySearch();
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredAgents = new List<AgentDescription>(agents);
            return;
        }

        filteredAgents = agents
            .Where(p => p.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                       p.Content.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task LoadRagFiles(Guid id)
    {
        ragFiles = await RagFileService.GetFilesAsync(id);
        ragCounts[id] = ragFiles.Count;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (editingAgent.Id == Guid.Empty) return;

        const long maxFileSize = 10 * 1024 * 1024; // 10MB
        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > maxFileSize)
            {
                Snackbar.Add($"File {file.Name} exceeds 10MB", Severity.Error);
                continue;
            }
            try
            {
                await using var ms = new MemoryStream();
                await file.OpenReadStream(maxFileSize).CopyToAsync(ms);
                ms.Position = 0;
                var formFile = new FormFile(ms, 0, ms.Length, file.Name, file.Name)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = file.ContentType
                };
                var content = await FileConverter.ConvertToTextAsync(formFile);
                await RagFileService.AddOrUpdateFileAsync(editingAgent.Id, new RagFile { FileName = file.Name, Content = content });
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error adding file: {ex.Message}", Severity.Error);
            }
        }

        await LoadRagFiles(editingAgent.Id);
    }

    private async Task DeleteFile(string fileName)
    {
        if (editingAgent.Id == Guid.Empty) return;

        try
        {
            await RagFileService.DeleteFileAsync(editingAgent.Id, fileName);
            await LoadRagFiles(editingAgent.Id);
            Snackbar.Add("File deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting file: {ex.Message}", Severity.Error);
        }
    }

    private static string FormatSize(long bytes)
    {
        const long kb = 1024;
        const long mb = kb * 1024;
        if (bytes >= mb) return $"{bytes / (double)mb:0.##} MB";
        if (bytes >= kb) return $"{bytes / (double)kb:0.##} KB";
        return $"{bytes} B";
    }

    private async Task StartEditingAgent(AgentDescription agent)
    {
        editingAgent = new AgentDescription
        {
            Id = agent.Id,
            AgentName = agent.AgentName,
            Content = agent.Content,
            ShortName = agent.ShortName,
            ModelName = agent.ModelName,
            LlmId = agent.LlmId,
            Temperature = agent.Temperature,
            RepeatPenalty = agent.RepeatPenalty,
            CreatedAt = agent.CreatedAt,
            UpdatedAt = agent.UpdatedAt,
            FunctionSettings = new FunctionSettings
            {
                AutoSelectCount = agent.FunctionSettings.AutoSelectCount,
                SelectedFunctions = new List<string>(agent.FunctionSettings.SelectedFunctions)
            }
        };

        editingServerModel = new ServerModelSelection(agent.LlmId, agent.ModelName);
        await LoadRagFiles(agent.Id);
        showEditAgentDialog = true;
    }

    private void ConfirmDeleteAgent(AgentDescription agent)
    {
        agentToDelete = agent;
        showDeleteDialog = true;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        agentToDelete = null;
        showDeleteDialog = false;
    }

    private async Task DeleteAgent()
    {
        if (agentToDelete is null || agentToDelete.Id == Guid.Empty) return;
        try
        {
            await AgentService.DeleteAsync(agentToDelete.Id);
            Snackbar.Add("Agent deleted successfully", Severity.Success);

            agents.Remove(agentToDelete);
            ragCounts.Remove(agentToDelete.Id);
            ApplySearch();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting agent: {ex.Message}", Severity.Error);
        }

        agentToDelete = null;
        showDeleteDialog = false;
    }

    private string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "Name is required";

        return string.Empty;
    }

    private string ValidateContent(string content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return "Content is required";

        return string.Empty;
    }

    private FunctionSettings GetFunctionSettings(AgentDescription agent)
        => agent.FunctionSettings;

    private void OnFunctionSettingsChanged(FunctionSettings settings)
    {
        editingAgent.FunctionSettings = settings;
    }

    private void CancelEdit()
    {
        showEditAgentDialog = false;
    }
    private async Task SaveAgent()
    {
        if (editAgentForm == null) return;
        await editAgentForm.Validate();
        if (editAgentForm.IsValid)
        {
            try
            {
                editingAgent.LlmId = editingServerModel.ServerId;
                editingAgent.ModelName = editingServerModel.ModelName;
                if (editingAgent.Id == Guid.Empty)
                {
                    var result = await AgentService.CreateAsync(editingAgent);
                    agents.Add(result);
                    ragCounts[result.Id] = ragFiles.Count;
                    Snackbar.Add("Agent description created successfully", Severity.Success);
                }
                else
                {
                    editingAgent.UpdatedAt = DateTime.UtcNow;
                    var result = await AgentService.UpdateAsync(editingAgent);
                    var index = agents.FindIndex(p => p.Id == editingAgent.Id);
                    if (index >= 0) agents[index] = result;
                    ragCounts[result.Id] = ragFiles.Count;
                    Snackbar.Add("Agent description updated successfully", Severity.Success);
                }

                showEditAgentDialog = false;
                ApplySearch();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error saving agent: {ex.Message}", Severity.Error);
            }
        }
    }
}
