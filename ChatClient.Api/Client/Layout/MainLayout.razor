@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IAppChatService ChatService
@inject IUserSettingsService UserSettingsService
@using ChatClient.Shared.Models
@using ChatClient.Api.Client.Pages
@using ChatClient.Api.Client.Components
@using ChatClient.Api.Services

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<CascadingValue Value="@selectedModel" Name="SelectedModel">
<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" Size="Size.Medium" />
        <MudText Typo="Typo.h6" Class="ml-3">Ollama chat with MCP</MudText>
        @if (!isLLMAnswering)
        {
            <MudButton OnClick="NewChat"
                       Color="Color.Secondary"
                       Variant="Variant.Outlined"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       Size="Size.Small"
                       Class="ml-4">New Chat</MudButton>
            <ServerModelPicker Value="selectedModel" ValueChanged="OnModelChanged" Class="ml-4" />
        }
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" Size="Size.Medium" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" Size="Size.Medium" />
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pt-14 pa-3">
        @Body
    </MudMainContent>
    @if (!IsOnChatPage())
    {
        <footer class="footer mt-4">
            <MudContainer>
                <MudText Align="Align.Center" Class="p-3 mud-text-secondary">
                    <small>Ollama Chat - Local LLM Chat via Ollama API</small>
                </MudText>
            </MudContainer>
        </footer>
    }
</MudLayout>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private bool isLLMAnswering;
    private ServerModel selectedModel = new(Guid.Empty, string.Empty);
    private MudTheme? _theme = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ChatService.AnsweringStateChanged += OnAnsweringStateChanged;
        isLLMAnswering = ChatService.IsAnswering;

        var settings = await UserSettingsService.GetSettingsAsync();
        selectedModel = new(settings.DefaultLlmId ?? Guid.Empty, settings.DefaultModelName);

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void OnAnsweringStateChanged(bool answering)
    {
        isLLMAnswering = answering;
        InvokeAsync(StateHasChanged);
    }

    private bool IsOnChatPage()
    {
        var currentPath = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).LocalPath;
        return currentPath == "/" || currentPath == "/chat" || currentPath == "/multi-agent-chat";
    }

    private void NewChat()
    {
        if (ChatService.AgentDescriptions.Count == 0)
        {
            return;
        }

        ChatService.InitializeChat(ChatService.AgentDescriptions);
        if (!IsOnChatPage())
        {
            NavigationManager.NavigateTo("/chat");
        }
    }

    

    private async Task OnModelChanged(ServerModel model)
    {
        var settings = await UserSettingsService.GetSettingsAsync();
        var serverId = model.ServerId != Guid.Empty ? model.ServerId : settings.DefaultLlmId ?? Guid.Empty;
        settings.DefaultLlmId = serverId;
        settings.DefaultModelName = model.ModelName;
        await UserSettingsService.SaveSettingsAsync(settings);
        selectedModel = model with { ServerId = serverId };
        StateHasChanged();
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    public ValueTask DisposeAsync()
    {
        ChatService.AnsweringStateChanged -= OnAnsweringStateChanged;
        return ValueTask.CompletedTask;
    }
}
