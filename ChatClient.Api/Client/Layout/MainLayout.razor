@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IChatService ChatService
@inject IUserSettingsService UserSettingsService
@inject KernelService KernelService
@inject IDialogService DialogService
@inject IOllamaClientService OllamaService
@using ChatClient.Shared.Models
@using ChatClient.Api.Client.Pages
@using System.Collections.Generic
@using ChatClient.Api.Services

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<CascadingValue Value="@selectedFunctions" Name="SelectedFunctions">
<CascadingValue Value="@autoSelectFunctions" Name="AutoSelectFunctions">
<CascadingValue Value="@autoSelectCount" Name="AutoSelectCount">
<CascadingValue Value="@useAgentMode" Name="UseAgentMode">
<CascadingValue Value="@selectedModel" Name="SelectedModel">
<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" Size="Size.Medium" />
        <MudText Typo="Typo.h6" Class="ml-3">Ollama chat with MCP</MudText>
        @if (!isLLMAnswering)
        {
            <MudButton OnClick="NewChat"
                       Color="Color.Secondary"
                       Variant="Variant.Outlined"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       Size="Size.Small"
                       Class="ml-4">New Chat</MudButton>
           <MudCheckBox @bind-Value="useAgentMode"
                         Label="Agent"
                         Color="Color.Primary"
                         Size="Size.Small"
                         Dense="true"
                         Class="ml-4" />
           <MudButton OnClick="OpenFunctionsDialog"
                      Color="Color.Primary"
                      Variant="Variant.Text"
                      Size="Size.Small"
                      Class="ml-4">Functions</MudButton>
            <MudSelect T="OllamaModel"
                       Value="selectedModel"
                       ValueChanged="OnModelChanged"
                       Label="Model"
                       Variant="Variant.Filled"
                       Dense="true"
                       Margin="Margin.Dense"
                       Class="ml-4"
                       Style="min-width: 150px;">
                @foreach (var model in availableModels)
                {
                    <MudSelectItem Value="@model">
                        <span>@model.Name</span>
                        @if (model.SupportsImages)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Image"
                                     Size="Size.Small"
                                     Class="ml-1"
                                     title="Supports images"
                                     Style="color: #4caf50;" />
                        }
                        @if (model.SupportsFunctionCalling)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Settings"
                                     Size="Size.Small"
                                     Class="ml-1"
                                     title="Function calling support detected (may not be accurate)"
                                     Style="color: #2196f3;" />
                        }
                    </MudSelectItem>
                }
            </MudSelect>
        }
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" Size="Size.Medium" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" Size="Size.Medium" />
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pt-14 pa-3">
        @Body
    </MudMainContent>
    @if (!IsOnChatPage())
    {
        <footer class="footer mt-4">
            <MudContainer>
                <MudText Align="Align.Center" Class="p-3 mud-text-secondary">
                    <small>Ollama Chat - Local LLM Chat via Ollama API</small>
                </MudText>
            </MudContainer>
        </footer>
    }
</MudLayout>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private bool isLLMAnswering;
    private bool useAgentMode = false;
    private List<FunctionInfo> availableFunctions = new();
    private List<string> selectedFunctions = new();
    private bool autoSelectFunctions = false;
    private int autoSelectCount = 3;
    private List<OllamaModel> availableModels = new();
    private OllamaModel? selectedModel;
    private MudTheme? _theme = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ChatService.LoadingStateChanged += OnLoadingStateChanged;
        isLLMAnswering = ChatService.IsLoading;

        var settings = await UserSettingsService.GetSettingsAsync();
        useAgentMode = settings.DefaultUseAgentMode;
        autoSelectFunctions = settings.DefaultAutoSelectCount > 0;
        autoSelectCount = settings.DefaultAutoSelectCount > 0
            ? settings.DefaultAutoSelectCount
            : 3;

        try
        {
            availableFunctions = (await KernelService.GetAvailableFunctionsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available functions: {ex}");
            availableFunctions = new List<FunctionInfo>();
        }

        try
        {
            availableModels = (await OllamaService.GetModelsAsync()).ToList();
            if (!string.IsNullOrWhiteSpace(settings.DefaultModelName) &&
                availableModels.Any(m => m.Name == settings.DefaultModelName))
            {
                selectedModel = availableModels.FirstOrDefault(m => m.Name == settings.DefaultModelName);
            }
            else
            {
                selectedModel = availableModels.FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available models: {ex}");
            availableModels = new List<OllamaModel>();
        }

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void OnLoadingStateChanged(bool loading)
    {
        isLLMAnswering = loading;
        InvokeAsync(StateHasChanged);
    }

    private bool IsOnChatPage()
    {
        var currentPath = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).LocalPath;
        return currentPath == "/" || currentPath == "/chat";
    }

    private void NewChat()
    {
        ChatService.InitializeChat(ChatService.AgentDescriptions);
        if (!IsOnChatPage())
        {
            NavigationManager.NavigateTo("/chat");
        }
    }

    private async Task OpenFunctionsDialog()
    {
        var parameters = new DialogParameters
        {
            ["AvailableFunctions"] = availableFunctions,
            ["SelectedFunctions"] = selectedFunctions,
            ["SelectedFunctionsChanged"] = EventCallback.Factory.Create<List<string>>(this, OnSelectedFunctionsChanged),
            ["Expanded"] = true,
            ["AutoSelectFunctions"] = autoSelectFunctions,
            ["AutoSelectFunctionsChanged"] = EventCallback.Factory.Create<bool>(this, v => { autoSelectFunctions = v; InvokeAsync(StateHasChanged); }),
            ["AutoSelectCount"] = autoSelectCount,
            ["AutoSelectCountChanged"] = EventCallback.Factory.Create<int>(this, v => { autoSelectCount = v; InvokeAsync(StateHasChanged); })
        };

        await DialogService.ShowAsync<FunctionSelector>("Functions", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });
    }

    private Task OnSelectedFunctionsChanged(List<string> functions)
    {
        selectedFunctions = functions;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnModelChanged(OllamaModel model)
    {
        selectedModel = model;
        StateHasChanged();
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    public ValueTask DisposeAsync()
    {
        ChatService.LoadingStateChanged -= OnLoadingStateChanged;
        return ValueTask.CompletedTask;
    }
}
