@using ChatClient.Shared.Models
@using ChatClient.Api.Services
@using MudBlazor
@inject OllamaService OllamaService
@inject NavigationManager NavigationManager
@inject ILogger<OllamaCheck> Logger

@if (isChecking)
{
    <div class="d-flex justify-center align-center" style="height: 50vh;">
        <div class="text-center">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6" Class="mt-4">Checking Ollama status...</MudText>
        </div>
    </div>
}
else if (!ollamaAvailable)
{
    <div class="d-flex justify-center align-center" style="height: 50vh;">
        <div class="text-center">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Large" Color="Color.Warning" />
            <MudText Typo="Typo.h6" Class="mt-2 mb-3">Ollama Server Required</MudText>
            <MudText Class="mb-2">This page requires Ollama to be running.</MudText>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @errorMessage
                </MudText>
            }
            <MudButtonGroup>
                <MudButton Href="https://ollama.com"
                           Target="_blank"
                           Variant="Variant.Filled" Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.OpenInNew">
                    https://ollama.com
                </MudButton>
                <MudButton OnClick="CheckAgain"
                           Variant="Variant.Outlined" Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           Disabled="@isChecking">
                    Try Again
                </MudButton>
            </MudButtonGroup>
        </div>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool isChecking = true;
    private bool ollamaAvailable = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CheckOllamaStatus();
    }

    private async Task CheckAgain()
    {
        await CheckOllamaStatus();
    }

    private async Task CheckOllamaStatus()
    {
        isChecking = true;
        StateHasChanged();

        try
        {
            await OllamaService.GetModelsAsync();
            ollamaAvailable = true;
            errorMessage = null;
            Logger.LogInformation("Ollama is available for page access");
        }
        catch (Exception ex)
        {
            ollamaAvailable = false;
            var status = OllamaStatusHelper.CreateStatusFromException(ex, "");
            errorMessage = status.ErrorMessage;
            Logger.LogWarning(ex, "Ollama not available for page access: {ErrorMessage}", errorMessage);
        }
        finally
        {
            isChecking = false;
            StateHasChanged();
        }
    }
}
