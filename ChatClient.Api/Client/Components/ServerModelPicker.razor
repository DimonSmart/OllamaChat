@using ChatClient.Api.Services
@using ChatClient.Shared.Models
@inject ILlmServerConfigService LlmServerConfigService
@inject IOllamaClientService OllamaService
@inject IUserSettingsService UserSettingsService

<MudStack Spacing="1" Row="true" AlignItems="AlignItems.Center" @attributes="Attributes" Style="flex: 1; min-width: 0;">
    <MudSelect T="Guid?" Value="selectedServerId" ValueChanged="OnServerChanged" Placeholder="Server" 
               Variant="Variant.Filled" Dense="true" Margin="Margin.None"
               Style="min-width:120px; max-width:160px;"
               Text="@GetSelectedServerName()">
        @foreach (var server in servers)
        {
            <MudSelectItem Value="@server.Id">@server.Name</MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="string" Value="selectedModel" ValueChanged="OnModelChanged" Placeholder="Model"
               Variant="Variant.Filled" Disabled="@(!selectedServerId.HasValue || loading || loadError != null)" Dense="true" Margin="Margin.None"
               Style="min-width:120px; max-width:180px;">
        @foreach (var model in models)
        {
            <MudSelectItem Value="@model.Name">@model.Name</MudSelectItem>
        }
    </MudSelect>
    @if (loading)
    {
        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="ml-2" />
    }
    else if (loadError != null)
    {
        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Class="ml-2" Title="@loadError" />
    }
</MudStack>

@code {
    [Parameter] public ServerModel Value { get; set; } = new(Guid.Empty, string.Empty);
    [Parameter] public EventCallback<ServerModel> ValueChanged { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> Attributes { get; set; } = [];

    private Guid? selectedServerId;
    private string? selectedModel;
    private List<LlmServerConfig> servers = [];
    private List<OllamaModel> models = [];
    private bool loading;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        servers = await LlmServerConfigService.GetAllAsync();
        if (Value.ServerId == Guid.Empty && string.IsNullOrEmpty(Value.ModelName))
        {
            var settings = await UserSettingsService.GetSettingsAsync();
            selectedServerId = settings.DefaultLlmId;
            selectedModel = settings.DefaultModelName;
            if (selectedServerId.HasValue)
                await LoadModelsAsync(selectedServerId.Value);
            await NotifyValueChanged();
            return;
        }
        selectedServerId = Value.ServerId;
        if (selectedServerId.HasValue)
            await LoadModelsAsync(selectedServerId.Value);
        if (!string.IsNullOrEmpty(Value.ModelName))
            selectedModel = Value.ModelName;
    }

    private async Task OnServerChanged(Guid? id)
    {
        selectedServerId = id;
        selectedModel = null;
        models.Clear();
        if (id.HasValue)
        {
            await LoadModelsAsync(id.Value);
        }
        await NotifyValueChanged();
    }

    private async Task OnModelChanged(string? model)
    {
        selectedModel = model;
        await NotifyValueChanged();
    }

    private async Task NotifyValueChanged()
    {
        var selection = new ServerModel(selectedServerId ?? Guid.Empty, selectedModel ?? string.Empty);
        Value = selection;
        await ValueChanged.InvokeAsync(selection);
    }

    private async Task LoadModelsAsync(Guid serverId)
    {
        try
        {
            loading = true;
            loadError = null;
            StateHasChanged();
            models = (await OllamaService.GetModelsAsync(serverId)).ToList();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
            models.Clear();
        }
        finally
        {
            loading = false;
        }
    }

    private string GetSelectedServerName()
    {
        if (!selectedServerId.HasValue)
            return string.Empty;
        
        var server = servers.FirstOrDefault(s => s.Id == selectedServerId.Value);
        return server?.Name ?? string.Empty;
    }
}
